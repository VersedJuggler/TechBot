# tg_bot.py
import os
import asyncio
import tempfile
import json
import html
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from pathlib import Path
from dotenv import load_dotenv
from telegram.constants import ParseMode
load_dotenv()

import pandas as pd
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)
import shutil

# ---------------------------------------------------------------------------
# –ó–∞–º–µ–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
# –æ–∫—Ä—É–∂–µ–Ω–∏—è TG_BOT_TOKEN, —á—Ç–æ–±—ã —Ç–æ–∫–µ–Ω –ø–æ–¥—Ç—è–Ω—É–ª—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
# ---------------------------------------------------------------------------
TOKEN: str | None = os.getenv("TG_BOT_TOKEN")
# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMINS_FILE = "admins.json"

def _load_admins() -> set[int]:
    if os.path.exists(ADMINS_FILE):
        try:
            with open(ADMINS_FILE, "r", encoding="utf-8") as f:
                data = json.load(f)
                return set(map(int, data.get("admins", [])))
        except Exception:
            pass
    # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –Ω–∞–±–æ—Ä (—Å—Ç–∞—Ä—ã–µ id)
    return {6413686861, 728567535, 510202114, 7548453140}

def _save_admins(admins: set[int]) -> None:
    try:
        with open(ADMINS_FILE, "w", encoding="utf-8") as f:
            json.dump({"admins": list(admins)}, f, ensure_ascii=False, indent=2)
    except Exception:
        pass

def is_admin(user_id: int) -> bool:
    return user_id in _load_admins()


# –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
CATALOG_FILE = "catalog_data.json"
LATEST_EXCEL_FILE = "latest_catalog.xlsx"
MOVED_OVERRIDES_FILE = "moved_overrides.json"
def _load_moved_overrides() -> dict:
    if os.path.exists(MOVED_OVERRIDES_FILE):
        try:
            with open(MOVED_OVERRIDES_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception:
            pass
    return {}

def _save_moved_overrides(overrides: dict) -> None:
    try:
        with open(MOVED_OVERRIDES_FILE, "w", encoding="utf-8") as f:
            json.dump(overrides, f, ensure_ascii=False, indent=2)
    except Exception:
        pass

MANUAL_CATEGORIES_FILE = "manual_categories.json"
def _load_manual_categories() -> dict:
    if os.path.exists(MANUAL_CATEGORIES_FILE):
        try:
            with open(MANUAL_CATEGORIES_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception:
            pass
    return {}

def _save_manual_categories(manual_cats: dict) -> None:
    try:
        with open(MANUAL_CATEGORIES_FILE, "w", encoding="utf-8") as f:
            json.dump(manual_cats, f, ensure_ascii=False, indent=2)
    except Exception:
        pass
    
    

# –ù–∞–∑–≤–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
BTN_CHOOSE_CATEGORY = "üóÇÔ∏è –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
# –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É
BTN_CONTACT_MANAGER = "üí¨ –ó–∞–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞"
BTN_SUBSCRIBE = "‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"
BTN_GET_EXCEL = "üíæ –ü–æ–ª—É—á–∏—Ç—å Excel-—Ñ–∞–π–ª"
BTN_SEARCH_CATALOG = "üîç –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É"

# –î–æ–±–∞–≤–∏–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –∫–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏
CMD_HELP = "help"

# –°—Å—ã–ª–∫–∏ –¥–ª—è —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
MANAGER_TELEGRAM_LINK = "https://t.me/tanya_chilikova"
# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è WhatsApp chat link
MANAGER_WHATSAPP_LINK = "https://wa.me/79278783209"


# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
BTN_ADMIN_PANEL = "üõ†Ô∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"

def get_main_menu_markup(is_admin=False):
    rows = [
        [BTN_CHOOSE_CATEGORY, BTN_CONTACT_MANAGER],
        [BTN_SUBSCRIBE, BTN_GET_EXCEL],
        [BTN_SEARCH_CATALOG],
    ]
    if is_admin:
        rows.append([BTN_ADMIN_PANEL])
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

MAIN_MENU_MARKUP = get_main_menu_markup(False)

# –ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–µ–Ω—é
PREFERRED_CATEGORY_ORDER: list[str] = [
    "–¢–µ–ª–µ—Ñ–æ–Ω—ã",
    "–ü–ª–∞–Ω—à–µ—Ç—ã",
    "–ù–æ—É—Ç–±—É–∫–∏",
]

def make_admin_panel_markup() -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton("üì• –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥ (.xlsx)", callback_data="adminpanel_add_catalog")],
        [InlineKeyboardButton("üîÄ –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤", callback_data="adminpanel_change_category")],
        [InlineKeyboardButton("üìù –†—É—á–Ω—ã–µ (manual)", callback_data="adminpanel_manual_root")],
        [InlineKeyboardButton("üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏", callback_data="adminpanel_edit_admins")],
    ]
    return InlineKeyboardMarkup(buttons)

async def show_admin_panel(update_or_query, context):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    update_or_query –º–æ–∂–µ—Ç –±—ã—Ç—å –∏ Update, –∏ CallbackQuery.
    """
    chat_id = (
        update_or_query.effective_chat.id
        if hasattr(update_or_query, "effective_chat")
        else update_or_query.message.chat.id
    )
    await context.bot.send_message(
        chat_id=chat_id,
        text="üõ†Ô∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>:",
        reply_markup=make_admin_panel_markup(),
        parse_mode="HTML"
    )


def _sort_categories(cat_names: list[str]) -> list[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –∂–µ–ª–∞–µ–º–æ–º –ø–æ—Ä—è–¥–∫–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.

    1. –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ PREFERRED_CATEGORY_ORDER ‚Äì –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
    2. –û—Å—Ç–∞–ª—å–Ω—ã–µ (–∫—Ä–æ–º–µ "–î—Ä—É–≥–æ–µ") ‚Äì –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É.
    3. "–î—Ä—É–≥–æ–µ" ‚Äì –ø–æ—Å–ª–µ–¥–Ω–µ–π, –µ—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç.
    """
    order_map = {name: idx for idx, name in enumerate(PREFERRED_CATEGORY_ORDER)}

    preferred = [c for c in PREFERRED_CATEGORY_ORDER if c in cat_names]
    other = sorted([c for c in cat_names if c not in order_map and c != "–î—Ä—É–≥–æ–µ"])
    tail = ["–î—Ä—É–≥–æ–µ"] if "–î—Ä—É–≥–æ–µ" in cat_names else []
    return preferred + other + tail



def _load_catalog_from_disk() -> dict | None:
    """–ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∏–∑ —Ñ–∞–π–ª–∞ JSON."""
    if os.path.exists(CATALOG_FILE):
        try:
            with open(CATALOG_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception:
            pass
    return None

def get_full_catalog(context) -> dict:
    """–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–∞–ª–æ–≥, –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏ manual_categories –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏ –ø–æ–∏—Å–∫–∞."""
    catalog = context.application.bot_data.get("catalog") or {}
    moved = context.application.bot_data.get("moved_overrides") or {}
    manual = context.application.bot_data.get("manual_categories") or {}

    import copy
    # –ì–ª—É–±–æ–∫–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ä—Ç–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—ã
    full = copy.deepcopy(catalog)

    # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã (moved_overrides)
    for cat, brands in moved.items():
        for brand, items in brands.items():
            full.setdefault(cat, {}).setdefault(brand, []).extend(copy.deepcopy(items))

    # –ó–∞—Ç–µ–º –≤—Ä—É—á–Ω—É—é –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã (manual_categories)
    for cat, brands in manual.items():
        for brand, items in brands.items():
            full.setdefault(cat, {}).setdefault(brand, []).extend(copy.deepcopy(items))

    return full


def _save_catalog_to_disk(catalog: dict) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–∞–ª–æ–≥ –≤ —Ñ–∞–π–ª JSON."""
    try:
        with open(CATALOG_FILE, "w", encoding="utf-8") as f:
            json.dump(catalog, f, ensure_ascii=False, indent=2)
    except Exception:
        pass


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        # –ü—Ä–∏ /start –æ—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —à–∞–≥–∏ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
    for key in [
        "manualcat_step",
        "manualcat_category",
        "manualcat_brand",
        "manualcat_items",
        "manualcat_del_map",
        "manualprod_step",
        "manualprod_cat",
        "manualprod_brand",
        "manualprod_select_map",
        "manualprod_del_map",
        "change_step",
        "change_cat",
        "change_sub",
        "change_indices",
        "new_cat",
        "manualprice_step",
        "manualprice_cat",
        "manualprice_brand",
        "manualprice_indices",
        "manualprice_select_map",
    ]:
        context.user_data.pop(key, None)
        
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start: –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≤—ã–≤–æ–¥ –∫–∞—Ç–∞–ª–æ–≥–∞, –µ—Å–ª–∏ –æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω."""
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    greet_text = (
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ –Ω–∞—à–µ–º –∫–∞—Ç–∞–ª–æ–≥–µ. "
        "–í–æ—Ç —á—Ç–æ –º—ã –º–æ–∂–µ–º –≤–∞–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å"
    )

    user_id = update.effective_user.id if update.effective_user else None
    is_admin_user = user_id and is_admin(user_id)
    await update.message.reply_text(greet_text, reply_markup=get_main_menu_markup(is_admin_user))

    # –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥
    full_catalog = get_full_catalog(context)
    if full_catalog:
        buttons = []
        for cat_name in _sort_categories(list(full_catalog.keys())):
            subdict = full_catalog[cat_name]
            count = sum(len(items) for items in subdict.values())
            buttons.append([InlineKeyboardButton(text=f"{cat_name} ({count})", callback_data=f"cat|{cat_name}")])
        markup = InlineKeyboardMarkup(buttons)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)
    else:
        await update.message.reply_text("–ö–∞—Ç–∞–ª–æ–≥ –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# -------------------------------------------------------------------
# –ü—Ä–∞–≤–∏–ª–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –±—Ä–µ–Ω–¥–æ–≤ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ)
# -------------------------------------------------------------------


# –ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç: (–ö–∞—Ç–µ–≥–æ—Ä–∏—è, [—Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ])
# –ü–æ—Ä—è–¥–æ–∫ ‚Äî —á–µ–º –≤—ã—à–µ, —Ç–µ–º –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç.
CATEGORY_KEYWORDS: list[tuple[str, list[str]]] = [
    # –í–æ–∑–¥—É—Ö–æ–æ—á–∏—Å—Ç–∏—Ç–µ–ª–∏
    ("–í–æ–∑–¥—É—Ö–æ–æ—á–∏—Å—Ç–∏—Ç–µ–ª–∏", [
        "–æ—á–∏—Å—Ç–∏—Ç–µ–ª—å –≤–æ–∑–¥—É—Ö–∞", "–≤–æ–∑–¥—É—Ö–æ–æ—á–∏—Å—Ç–∏—Ç–µ–ª—å", "purifier"
    ]),
    # –û—Ç–¥–µ–ª—å–Ω—ã–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Üí –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤—ã—à–µ
    ("–¢–µ–ª–µ—Ñ–æ–Ω—ã –ø—Ä–æ—Ç–∏–≤–æ—É–¥–∞—Ä–Ω—ã–µ", [
        "blackview", "doogee", "oukitel", "unihertz", "rugged", "armor", "tank", "cyber", "mega"
    ]),
    ("–¢–µ–ª–µ—Ñ–æ–Ω—ã –∫–Ω–æ–ø–æ—á–Ω—ã–µ", ["nokia", "f+", "button phone", "feature phone"]),
    ("–ò–≥—Ä–æ–≤—ã–µ –∫–æ–Ω—Å–æ–ª–∏", [
        "playstation", "ps4", "ps5", "xbox", "switch", "steam deck", "steamdeck",
        "–¥–∂–æ–π—Å—Ç–∏–∫", "–∏–≥—Ä–æ–≤–∞—è –∫–æ–Ω—Å–æ–ª—å", "–∏–≥—Ä–æ–≤–∞—è –ø—Ä–∏—Å—Ç–∞–≤–∫–∞"
    ]),
    ("VR-–≥–∞—Ä–Ω–∏—Ç—É—Ä—ã", [
    "vr", "vr —à–ª–µ–º", "vr-—à–ª–µ–º", "vr headset", "virtual reality",
    "oculus", "quest", "meta quest", "vive", "htc vive", "pico",
    "valve index", "reverb", "hp reverb", "ps vr", "psvr", "psvr2", "ps vr2"
    ]),
    (
        "–≠–∫—à–µ–Ω-–∫–∞–º–µ—Ä—ã",
        [
            # GoPro
            "gopro", "go pro", "hero", "gopro hero", "gopro hero 10", "gopro hero 11", "gopro hero 12",
            "gopro hero 13", "gopro hero 14", "gopro hero 15", "gopro hero 16", "gopro hero 17", "gopro hero 18", "gopro hero 19", "gopro hero 20",
            # DJI Osmo Action
            "dji", "osmo action", "action 5", "action5", "osmo action 5", "osmoaction",
            # Insta360
            "insta", "insta360", "insta 360"
        ],
    ),
    # –ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: –§–µ–Ω-—Å—Ç–∞–π–ª–µ—Ä (—Ñ–µ–Ω—ã, —Å—Ç–∞–π–ª–µ—Ä—ã –¥–ª—è –≤–æ–ª–æ—Å)
    (
        "–§–µ–Ω-—Å—Ç–∞–π–ª–µ—Ä",
        [
            "—Ñ–µ–Ω",
            "—Å—Ç–∞–π–ª–µ—Ä",
            "—Ñ–µ–Ω-—Å—Ç–∞–π–ª–µ—Ä",
            "hair dryer",
            "styler",
            "airwrap",
            "supersonic",
            "hd08",
            "hd-08",
            "hd16",
            "hd-16",
            "hs08",
            "hs-08",
            "ht01",
            "ht-01",
        ],
    ),
    ("–ü—ã–ª–µ—Å–æ—Å—ã", ["–ø—ã–ª–µ—Å–æ—Å", "vacuum", "—Ä–æ–±–æ—Ç-–ø—ã–ª–µ—Å–æ—Å", "dyson", "dreame", "submarine"]),
    ("–ü–ª–∞–Ω—à–µ—Ç—ã", ["ipad", " galaxy tab", "tab ", "redmi pad", "poco pad", "tablet", "pad "]),
    ("–ù–æ—É—Ç–±—É–∫–∏", ["–Ω–æ—É—Ç–±—É–∫", "macbook", "magicbook", "matebook", "redmi book", "aspire", "ideapad", "ultrabook", "chromebook"]),
    ("–ö–æ–ª–æ–Ω–∫–∏", ["–∫–æ–ª–æ–Ω–∫–∞", "speaker", "jbl", "marshall", "sber", "—è–Ω–¥–µ–∫—Å", "boombox", "partybox", "stanmore", "woburn", "–º–∞–∫—Å"]),
    ("–ù–∞—É—à–Ω–∏–∫–∏", ["–Ω–∞—É—à–Ω–∏–∫", "–Ω–∞—É—à–Ω–∏–∫–∏", "airpods", "buds", "earphones", "earbuds", "sony wh-", "jbl tune", "marshall minor", "marshall major", "–≥–∞—Ä–Ω–∏—Ç—É—Ä–∞"]),
    ("–ß–∞—Å—ã", ["—á–∞—Å—ã", "watch", "smart band", "galaxy fit", "fitbit", "amazfit", "gtr", "gt3"]),
    ("–¢–µ–ª–µ—Ñ–æ–Ω—ã", [
        "iphone", "samsung", "x.mi", "x.poco", "x.redmi", "honor", "google pixel", "zte", "realme",
        "oneplus", "asus zenfone", "—Å–º–∞—Ä—Ç—Ñ–æ–Ω", "smartphone", "galaxy"
    ]),
    ("–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã", [
        "—Å–∑—É", "—Å–µ—Ç–µ–≤–æ–µ –∑–∞—Ä—è–¥–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", "–∫–∞–±–µ–ª—å", "–ø–µ—Ä–µ—Ö–æ–¥–Ω–∏–∫", "pencil", "keyboard", "mouse",
        "adapter", "magsafe", "–±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–∞—è –∑–∞—Ä—è–¥–∫–∞", "powerbank", "power bank", "—á–µ—Ö–æ–ª", "case", "cover"
    ]),
        ("–ö–∞–º–µ—Ä—ã –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è", [
        "–≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏", "ip-–∫–∞–º–µ—Ä–∞", "ip –∫–∞–º–µ—Ä–∞", "cctv",
        "security camera", "ezviz", "hikvision", "dahua",
        "imou", "reolink", "wifi –∫–∞–º–µ—Ä–∞", "wi-fi –∫–∞–º–µ—Ä–∞", "tapo",
        "–¥–æ–º–∞—à–Ω—è—è –∫–∞–º–µ—Ä–∞", "–∫–∞–º–µ—Ä–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è"
    ]),
    ("–ì—Ä–∏–ª–∏", [
        "–≥—Ä–∏–ª—å", "–≥—Ä–∏–ª–∏", "–≥—Ä–∏–ª—å–Ω–∏—Ü–∞", "—ç–ª–µ–∫—Ç—Ä–æ–≥—Ä–∏–ª—å",
        "–≥–∞–∑–æ–≤—ã–π –≥—Ä–∏–ª—å", "—É–≥–æ–ª—å–Ω—ã–π –≥—Ä–∏–ª—å"
    ]),
    ("–ö–≤–∞–¥—Ä–æ–∫–æ–ø—Ç–µ—Ä—ã", [
        "–∫–≤–∞–¥—Ä–æ–∫–æ–ø—Ç–µ—Ä", "–∫–≤–∞–¥—Ä–æ–∫–æ–ø—Ç–µ—Ä—ã", "–∫–æ–ø—Ç–µ—Ä", "–¥—Ä–æ–Ω",
        "drone", "quadcopter", "fpv", "mavic", "phantom", "air 2s", "mini 3", "mini 4"
    ]),
    ("–≠–ª–µ–∫—Ç—Ä–æ–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", [
        "—à—É—Ä—É–ø–æ–≤–µ—Ä—Ç", "—à—É—Ä—É–ø–æ–≤—ë—Ä—Ç", "–¥—Ä–µ–ª—å", "–ø–µ—Ä—Ñ–æ—Ä–∞—Ç–æ—Ä", "–±–æ–ª–≥–∞—Ä–∫–∞",
        "—É–≥–ª–æ—à–ª–∏—Ñ–æ–≤–∞–ª—å–Ω–∞—è", "–ª–æ–±–∑–∏–∫", "–ø–∏–ª–∞", "—à–ª–∏—Ñ–º–∞—à–∏–Ω–∞", "—Ñ—Ä–µ–∑–µ—Ä",
        "—Ä–µ–Ω–æ–≤–∞—Ç–æ—Ä", "—Å–∞–±–µ–ª—å–Ω–∞—è –ø–∏–ª–∞", "–≥–∞–π–∫–æ–≤–µ—Ä—Ç", "–≥–∞–π–∫–æ–≤—ë—Ä—Ç", "—à—Ç—Ä–æ–±–æ—Ä–µ–∑"
    ]),
    ("–ë—Ä–∏—Ç–≤—ã, —Ç—Ä–∏–º–º–µ—Ä—ã", [
        "–±—Ä–∏—Ç–≤–∞", "—ç–ª–µ–∫—Ç—Ä–æ–±—Ä–∏—Ç–≤–∞", "—Ç—Ä–∏–º–º–µ—Ä", "–º–∞—à–∏–Ω–∫–∞ –¥–ª—è —Å—Ç—Ä–∏–∂–∫–∏",
        "—à–µ–π–≤–µ—Ä", "shaver", "groom"
    ]),
    ("–≠–ø–∏–ª—è—Ç–æ—Ä—ã", [
        "—ç–ø–∏–ª—è—Ç–æ—Ä", "—Ñ–æ—Ç–æ—ç–ø–∏–ª—è—Ç–æ—Ä", "ipl", "–ª–∞–∑–µ—Ä–Ω–∞—è —ç–ø–∏–ª—è—Ü–∏—è"
    ]),
    ("–ó—É–±–Ω—ã–µ —â–µ—Ç–∫–∏", [
        "–∑—É–±–Ω–∞—è —â–µ—Ç–∫–∞", "–∑—É–±–Ω—ã–µ —â–µ—Ç–∫–∏", "—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∞—è —â–µ—Ç–∫–∞",
        "oral-b", "oral b", "sonicare", "oclean", "soocas", "—â–µ—Ç–∫–∞ –∑—É–±–Ω–∞—è", "—â—ë—Ç–∫–∞"
    ]),
]

BRAND_KEYWORDS: dict[str, str] = {
    # –°–º–∞—Ä—Ç—Ñ–æ–Ω—ã –∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞
    "apple": "Apple",
    "iphone": "Apple",
    "samsung": "Samsung",
    "galaxy": "Samsung",
    "xiaomi": "Xiaomi",
    "redmi": "Xiaomi",
    "poco": "Xiaomi",
    "mi ": "Xiaomi",
    "honor": "HONOR",
    "huawei": "Huawei",
    "google": "Google",
    "pixel": "Google",
    "zte": "ZTE",
    "realme": "Realme",
    "oneplus": "OnePlus",
    "asus": "ASUS",
    "zenfone": "ASUS",
    "lenovo": "Lenovo",
    "acer": "Acer",
    "gigabyte": "Gigabyte",
    "machenike": "Machenike",
    # –ù–∞—É—à–Ω–∏–∫–∏ –∏ –∑–≤—É–∫
    "jbl": "JBL",
    "marshall": "Marshall",
    "sony": "SONY",
    "sber": "Sber",
    "—è–Ω–¥–µ–∫—Å": "–Ø–Ω–¥–µ–∫—Å",
    # –ü—ã–ª–µ—Å–æ—Å—ã –∏ —Ç–µ—Ö–Ω–∏–∫–∞
    "dyson": "Dyson",
    "dreame": "Dreame",
    # –¢–µ–ª–µ—Ñ–æ–Ω—ã –∫–Ω–æ–ø–æ—á–Ω—ã–µ / –ø—Ä–æ—Ç–∏–≤–æ—É–¥–∞—Ä–Ω—ã–µ
    "nokia": "Nokia",
    "f+": "F+",
    "digma linx": "Digma Linx",
    "blackview": "Blackview",
    "doogee": "DOOGEE",
    "hotwav": "Hotwav",
    "oukitel": "OUKITEL",
    "unihertz": "Unihertz",
    # –ü—Ä–æ—á–µ–µ
    "gopro": "GoPro",
    "garmin": "Garmin",
    "fitbit": "Fitbit",
    # –≠–∫—à–µ–Ω-–∫–∞–º–µ—Ä—ã
    "dji": "DJI",
    "osmo": "DJI",
    "insta": "Insta360",
    "insta360": "Insta360",
    # VR 
    "oculus": "Oculus",
    "quest": "Oculus",
    "meta": "Meta",
    "htc": "HTC",
    "vive": "HTC",
    "pico": "Pico",
    "valve": "Valve",
    "valve index": "Valve",
    "hp": "HP",
    "reverb": "HP",         # HP Reverb
    "playstation": "SONY",  # —á—Ç–æ–±—ã PS VR/PS VR2 –ø–æ–ª—É—á–∏–ª–∏ –±—Ä–µ–Ω–¥ SONY
    
    # –ö–∞–º–µ—Ä—ã –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è
    "hikvision": "Hikvision",
    "dahua": "Dahua",
    "ezviz": "EZVIZ",
    "imou": "IMOU",
    "reolink": "Reolink",
    "tapo": "TP-Link Tapo",
    "tp-link": "TP-Link",
    "tplink": "TP-Link",

    # –ö–≤–∞–¥—Ä–æ–∫–æ–ø—Ç–µ—Ä—ã
    "autel": "Autel",
    "hubsan": "Hubsan",
    "syma": "Syma",
    "parrot": "Parrot",

    # –≠–ª–µ–∫—Ç—Ä–æ–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    "bosch": "Bosch",
    "makita": "Makita",
    "dewalt": "DeWALT",
    "de walt": "DeWALT",
    "metabo": "Metabo",
    "ryobi": "Ryobi",

    # –ì—Ä–∏–ª–∏
    "weber": "Weber",
    "tefal": "Tefal",
    "redmond": "REDMOND",
    "kitfort": "Kitfort",
    "polaris": "Polaris",
    "george foreman": "George Foreman",

    # –ë—Ä–∏—Ç–≤—ã, —Ç—Ä–∏–º–º–µ—Ä—ã
    "philips": "Philips",
    "braun": "Braun",
    "panasonic": "Panasonic",
    "remington": "Remington",

    # –≠–ø–∏–ª—è—Ç–æ—Ä—ã
    "rowenta": "Rowenta",

    # –ó—É–±–Ω—ã–µ —â–µ—Ç–∫–∏
    "oral-b": "Oral-B",
    "oral b": "Oral-B",
    "sonicare": "Philips",
    "oclean": "Oclean",
    "soocas": "SOOCAS",
}


# --- –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞: /add_catalog ---
async def add_catalog_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /add_catalog ‚Äî –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π Excel-—Ñ–∞–π–ª —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)."""
    user_id = update.effective_user.id if update.effective_user else None
    chat_id = update.effective_chat.id if update.effective_chat else None
    if not user_id or not is_admin(user_id):
        if update.message:
            await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        elif chat_id:
            await context.bot.send_message(chat_id=chat_id, text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    context.user_data["awaiting_file"] = True
    if update.message:
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel-—Ñ–∞–π–ª (.xlsx) —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–π –±–∞–∑–æ–π —Ç–æ–≤–∞—Ä–æ–≤.")
    elif chat_id:
        await context.bot.send_message(chat_id=chat_id, text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel-—Ñ–∞–π–ª (.xlsx) —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–π –±–∞–∑–æ–π —Ç–æ–≤–∞—Ä–æ–≤.")



# --- –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞: /edit_category ---
async def edit_category_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /edit_category ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)."""
    user_id = update.effective_user.id if update.effective_user else None
    chat_id = update.effective_chat.id if update.effective_chat else None
    if not user_id or not is_admin(user_id):
        if update.message:
            await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        elif chat_id:
            await context.bot.send_message(chat_id=chat_id, text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Ä—É—á–Ω—É—é –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    manual_cats = context.application.bot_data.get("manual_categories")
    if manual_cats is None:
        manual_cats = _load_manual_categories()
        context.application.bot_data["manual_categories"] = manual_cats
    if not manual_cats:
        msg = "–í—Ä—É—á–Ω—É—é –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–µ—Ç."
    else:
        lines = []
        for cat, brands in manual_cats.items():
            for brand, items in brands.items():
                lines.append(f"<b>{cat}</b> / <i>{brand}</i>: {len(items)} –ø–æ–∑–∏—Ü–∏–π")
        msg = "–í—Ä—É—á–Ω—É—é –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n" + "\n".join(lines)
    buttons = [
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å", callback_data="manualcat_add")],
        [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data="manualcat_remove")],
    ]
    markup = InlineKeyboardMarkup(buttons)
    if update.message:
        await update.message.reply_text(msg, reply_markup=markup, parse_mode="HTML")
    elif chat_id:
        await context.bot.send_message(chat_id=chat_id, text=msg, reply_markup=markup, parse_mode="HTML")
    return

# --- –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞: /edit_products ---
async def edit_products_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /edit_products ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏ –≤–Ω—É—Ç—Ä–∏ –≤—Ä—É—á–Ω—É—é –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)."""
    user_id = update.effective_user.id if update.effective_user else None
    if not user_id or not is_admin(user_id):
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Ä—É—á–Ω—É—é –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏/–±—Ä–µ–Ω–¥—ã
    manual_cats = context.application.bot_data.get("manual_categories")
    if manual_cats is None:
        manual_cats = _load_manual_categories()
        context.application.bot_data["manual_categories"] = manual_cats

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Ä—É—á–Ω—É—é –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
    items = []
    cb_map = {}
    idx = 0
    for cat, brands in manual_cats.items():
        for brand in brands:
            cb_key = f"manualprod_select|{idx}"
            cb_map[cb_key] = (cat, brand)
            items.append([InlineKeyboardButton(f"{cat} / {brand}", callback_data=cb_key)])
            idx += 1

    if not items:
        await update.message.reply_text("–ù–µ—Ç –≤—Ä—É—á–Ω—É—é –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏.")
        return

    context.user_data["manualprod_select_map"] = cb_map
    markup = InlineKeyboardMarkup(items)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=markup)

# --- –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞: /edit_admins ---
async def edit_admins_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /edit_admins ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)."""
    user_id = update.effective_user.id if update.effective_user else None
    chat_id = update.effective_chat.id if update.effective_chat else None
    if not user_id or not is_admin(user_id):
        if update.message:
            await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        elif chat_id:
            await context.bot.send_message(chat_id=chat_id, text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –∏ –¥–≤–µ –∫–Ω–æ–ø–∫–∏: –î–æ–±–∞–≤–∏—Ç—å, –£–¥–∞–ª–∏—Ç—å
    admins = _load_admins()
    admin_lines = []
    for admin_id in admins:
        try:
            user = await context.bot.get_chat(admin_id)
            username = f"@{user.username}" if getattr(user, "username", None) else ""
        except Exception:
            username = ""
        admin_lines.append(f"{admin_id} {username}")
    msg = (
        "–¢–µ–∫—É—â–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:\n"
        + "\n".join(admin_lines)
    )
    buttons = [
        [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å", callback_data="admin_add")],
        [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data="admin_remove")],
    ]
    markup = InlineKeyboardMarkup(buttons)
    if update.message:
        await update.message.reply_text(msg, reply_markup=markup)
    elif chat_id:
        await context.bot.send_message(chat_id=chat_id, text=msg, reply_markup=markup)
    return


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /help ‚Äî –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º."""
    help_text = (
        "üì¶ <b>–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑:</b>\n\n"
        "–ù–∞–∂–º–∏—Ç–µ ¬´üí¨ –ó–∞–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞¬ª\n\n"
        "<b>–í —Å–æ–æ–±—â–µ–Ω–∏–∏ —É–∫–∞–∂–∏—Ç–µ</b> —Ç–æ—á–Ω—É—é –º–æ–¥–µ–ª—å —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç "
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä: <i>MacBook Pro 16 M4, 24/512, Black</i>)\n\n"
        "–ú—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–º –Ω–∞–ª–∏—á–∏–µ –∏ <b>–∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º</b> —Ç–æ–≤–∞—Ä –∑–∞ –≤–∞–º–∏\n\n"
        "üöö <b>–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ú–æ—Å–∫–≤–µ:</b>\n\n"
        "–í –ø—Ä–µ–¥–µ–ª–∞—Ö –ú–ö–ê–î ‚Äî –æ—Ç <b>1 000 ‚ÇΩ</b>\n"
        "–ó–∞ –ú–ö–ê–î (–¥–æ 30 –∫–º) ‚Äî –ø–æ –¥–æ–≥–æ–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏\n\n"
        "üõç <b>–°–∞–º–æ–≤—ã–≤–æ–∑ ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ:</b>\n\n"
        "–ó–∞–∫–∞–∑—ã, –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—ã–µ –¥–æ <b>13:00</b>, –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤ —Ç–æ—Ç –∂–µ –¥–µ–Ω—å\n"
        "–ü–æ—Å–ª–µ <b>13:00</b> ‚Äî –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å\n\n"
        "üïí <b>–í—ã–¥–∞—á–∞ –∑–∞–∫–∞–∑–æ–≤:</b>\n"
        "‚è∞ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ —Å <b>15:00</b> –¥–æ <b>16:00</b>\n"
        "üìç –ê–¥—Ä–µ—Å: <b>–¢–¶ –†—É–±–∏–Ω, –ë–∞–≥—Ä–∞—Ç–∏–æ–Ω–æ–≤—Å–∫–∏–π –ø—Ä–æ–µ–∑–¥, 7–∫2</b>\n"
        "(5 –º–∏–Ω—É—Ç –ø–µ—à–∫–æ–º –æ—Ç –º–µ—Ç—Ä–æ <i>–ë–∞–≥—Ä–∞—Ç–∏–æ–Ω–æ–≤—Å–∫–∞—è</i>)"
    )
    back_markup = InlineKeyboardMarkup([
        [InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="back|root")]
    ])
    await update.message.reply_text(
        help_text,
        reply_markup=back_markup,
        parse_mode=ParseMode.HTML
    )

async def about_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /about ‚Äî –∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–≥–∞–∑–∏–Ω–µ + –∫–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥."""
    text = (
        "<b>V&amp;P Tech</b> ‚Äî –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ –∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞ –ø–æ –Ω–∏–∑–∫–∏–º —Ü–µ–Ω–∞–º.\n"
        "üì¶ –í—Å—ë –≤ –Ω–∞–ª–∏—á–∏–∏, —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π.\n"
        "üöö –í –ú–æ—Å–∫–≤–µ ‚Äî –¥–æ—Å—Ç–∞–≤–∫–∞ –∏–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑ –≤ –¥–µ–Ω—å –∑–∞–∫–∞–∑–∞.\n"
        "üì¨ –ü–æ –†–æ—Å—Å–∏–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –°–î–≠–ö, –Ø–Ω–¥–µ–∫—Å, –ü–æ—á—Ç–æ–π.\n"
        "‚úÖ –†–∞–±–æ—Ç–∞–µ–º –¥–∞–≤–Ω–æ.\n"
        "üí¨ –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ú–µ–Ω–µ–¥–∂–µ—Ä –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å–≤—è–∑–∏!"
    )
    back_markup = InlineKeyboardMarkup([
        [InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="back|root")]
    ])
    await update.message.reply_text(text, reply_markup=back_markup, parse_mode=ParseMode.HTML)


import re

def extract_category(description: str) -> tuple[str, str]:
    """
    –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é —Å —É—á–µ—Ç–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤, –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏ –≥–∏–±–∫–∏—Ö –ø—Ä–∞–≤–∏–ª.
    """
    desc = description or ""
    desc_low = desc.lower()
    category = "–î—Ä—É–≥–æ–µ"
    subcategory = "–û–±—â–µ–µ"

    # 1. –í–æ–∑–¥—É—Ö–æ–æ—á–∏—Å—Ç–∏—Ç–µ–ª–∏ (–±—Ä–µ–Ω–¥—ã: Xiaomi, Dyson, Philips, Sharp, Boneco, Levoit)
    if any(x in desc_low for x in ["–æ—á–∏—Å—Ç–∏—Ç–µ–ª—å –≤–æ–∑–¥—É—Ö–∞", "–≤–æ–∑–¥—É—Ö–æ–æ—á–∏—Å—Ç–∏—Ç–µ–ª—å", "purifier"]):
        for kw, brand in [
            ("xiaomi", "Xiaomi"),
            ("dyson", "Dyson"),
            ("philips", "Philips"),
            ("sharp", "Sharp"),
            ("boneco", "Boneco"),
            ("levoit", "Levoit")
        ]:
            if kw in desc_low:
                return "–í–æ–∑–¥—É—Ö–æ–æ—á–∏—Å—Ç–∏—Ç–µ–ª–∏", brand
        return "–í–æ–∑–¥—É—Ö–æ–æ—á–∏—Å—Ç–∏—Ç–µ–ª–∏", "–û–±—â–µ–µ"

    # 2. –ò–≥—Ä–æ–≤—ã–µ –∫–æ–Ω—Å–æ–ª–∏: SteamDeck –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –±—Ä–µ–Ω–¥
    if "steam deck" in desc_low or "steamdeck" in desc_low:
        return "–ò–≥—Ä–æ–≤—ã–µ –∫–æ–Ω—Å–æ–ª–∏", "SteamDeck"

    # 3. –ò—Å–∫–ª—é—á–∏—Ç—å Mi TV Box –∏–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤/Xiaomi
    if ("mi tv box" in desc_low or "xiaomi tv box" in desc_low) and ("—Ç–µ–ª–µ—Ñ–æ–Ω" in desc_low or "xiaomi" in desc_low):
        return "–î—Ä—É–≥–æ–µ", "–û–±—â–µ–µ"


    # --- 1. –ù–∞—É—à–Ω–∏–∫–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —è–≤–Ω–æ–µ —Å–ª–æ–≤–æ, AirPods, EarPods, Buds, Earphones, Earbuds, –≥–∞—Ä–Ω–∏—Ç—É—Ä–∞, –¥–∞–∂–µ –µ—Å–ª–∏ –µ—Å—Ç—å type-c, usb-c –∏ —Ç.–¥.) ---
    headphones_pattern = r"\b(–Ω–∞—É—à–Ω–∏–∫|–Ω–∞—É—à–Ω–∏–∫–∏|airpods|air pods|air pod|earpods|ear pods|ear pod|earphones|earphone|earbuds|earbud|buds|–≥–∞—Ä–Ω–∏—Ç—É—Ä–∞)\b"
    if re.search(headphones_pattern, desc_low):
        for kw, brand in BRAND_KEYWORDS.items():
            if kw in desc_low:
                return "–ù–∞—É—à–Ω–∏–∫–∏", brand
        return "–ù–∞—É—à–Ω–∏–∫–∏", "–û–±—â–µ–µ"


    # --- 2. –ü–ª–∞–Ω—à–µ—Ç—ã (Pad, Tab, Tablet, –∫—Ä–æ–º–µ Notepad) ---
    # –ì–∏–±–∫–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω: tab, tablet, pad, galaxy tab, redmi pad, poco pad, ipad, –∏ —Ç.–¥.
    tablet_pattern = r"(ipad|\btab\b|tablet|pad(?![a-z]))"
    if (re.search(tablet_pattern, desc_low) or re.search(r"pad[\s\d]", desc_low)) and not re.search(r"notepad", desc_low):
        for kw, brand in BRAND_KEYWORDS.items():
            if kw in desc_low:
                return "–ü–ª–∞–Ω—à–µ—Ç—ã", brand
        return "–ü–ª–∞–Ω—à–µ—Ç—ã", "–û–±—â–µ–µ"

    # --- 3. –Ø–≤–Ω—ã–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã (—Ä–∞—Å—à–∏—Ä–µ–Ω–æ) ---
    accessories_kw = [
        "–∞–∫—Å–µ—Å—Å—É–∞—Ä", "—á–µ—Ö–æ–ª", "—Å—Ç–µ–∫–ª–æ", "–∫–∞–±–µ–ª—å", "—à–Ω—É—Ä", "–ø–µ—Ä–µ—Ö–æ–¥–Ω–∏–∫", "adapter", "–∑–∞—Ä—è–¥–∫–∞", "powerbank", "power bank", "magsafe", "pencil", "cover", "case", "screen protector", "–±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–∞—è –∑–∞—Ä—è–¥–∫–∞", "—Å–µ—Ç–µ–≤–æ–µ –∑–∞—Ä—è–¥–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", "—Å–∑—É", "–±–ª–æ–∫", "–∞–¥–∞–ø—Ç–µ—Ä", "–±–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è", "usb", "type-c", "lightning", "micro-usb", "–º–∞–≥–Ω–∏—Ç–Ω—ã–π –∫–∞–±–µ–ª—å", "—Å—Ç–µ–∫–ª–æ –∑–∞—â–∏—Ç–Ω–æ–µ", "–∑–∞—â–∏—Ç–Ω–æ–µ —Å—Ç–µ–∫–ª–æ", "–¥–æ–∫-—Å—Ç–∞–Ω—Ü–∏—è", "–¥–æ–∫ —Å—Ç–∞–Ω—Ü–∏—è", "–¥–æ–∫", "hub", "—Ä–∞–∑–≤–µ—Ç–≤–∏—Ç–µ–ª—å", "splitter", "–¥–µ—Ä–∂–∞—Ç–µ–ª—å", "mount", "–ø–æ–¥—Å—Ç–∞–≤–∫–∞", "—Ä–µ–º–µ—à–æ–∫", "strap", "—Ä–µ–º–µ–Ω—å", "–ø–ª–µ–Ω–∫–∞", "film", "–Ω–∞–∫–ª–µ–π–∫–∞", "–Ω–∞–∫–ª–µ–π–∫–∏", "stylus", "—Å—Ç–∏–ª—É—Å"
    ]
    if any(re.search(rf"(?<![–∞-—èa-z0-9]){re.escape(kw)}(?![–∞-—èa-z0-9])", desc_low) for kw in accessories_kw):
        for kw, brand in BRAND_KEYWORDS.items():
            if kw in desc_low:
                return "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã", brand
        return "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã", "–û–±—â–µ–µ"

    # --- 3. –ö–æ–ª–æ–Ω–∫–∏ (–∏—Å–∫–ª—é—á–∞—è –Ω–∞—É—à–Ω–∏–∫–∏) ---
    if re.search(r"\b(–∫–æ–ª–æ–Ω–∫–∞|speaker|boombox|partybox|stanmore|woburn)\b", desc_low) and not re.search(r"–Ω–∞—É—à–Ω–∏–∫|–Ω–∞—É—à–Ω–∏–∫–∏|buds|earbuds|–≥–∞—Ä–Ω–∏—Ç—É—Ä–∞", desc_low):
        for kw, brand in BRAND_KEYWORDS.items():
            if kw in desc_low:
                return "–ö–æ–ª–æ–Ω–∫–∏", brand
        return "–ö–æ–ª–æ–Ω–∫–∏", "–û–±—â–µ–µ"


    # --- 4. –§–µ–Ω-—Å—Ç–∞–π–ª–µ—Ä—ã (Dyson, Supersonic, Airwrap –∏ –¥—Ä.) ---
    if re.search(r"—Ñ–µ–Ω|—Å—Ç–∞–π–ª–µ—Ä|hair dryer|styler|airwrap|supersonic|hd08|hd-08|hd16|hd-16|hs08|hs-08|ht01|ht-01", desc_low):
        for kw, brand in BRAND_KEYWORDS.items():
            if kw in desc_low:
                return "–§–µ–Ω-—Å—Ç–∞–π–ª–µ—Ä", brand
        return "–§–µ–Ω-—Å—Ç–∞–π–ª–µ—Ä", "–û–±—â–µ–µ"

    # --- 5. –ü—ã–ª–µ—Å–æ—Å—ã (–≤—Å–µ –±—Ä–µ–Ω–¥—ã, –ª—é–±—ã–µ —Å–ª–æ–≤–∞) ---
    # –ü–∞—Ç—Ç–µ—Ä–Ω: –ø—ã–ª–µ—Å–æ—Å, vacuum, cleaner, —Ä–æ–±–æ—Ç-–ø—ã–ª–µ—Å–æ—Å, robot vacuum, robot cleaner, —Ä–æ–±–æ—Ç vacuum, —Ä–æ–±–æ—Ç cleaner, dreame, dyson, submarine
    if re.search(r"–ø—ã–ª–µ—Å–æ—Å|vacuum|cleaner|—Ä–æ–±–æ—Ç-–ø—ã–ª–µ—Å–æ—Å|robot vacuum|robot cleaner|—Ä–æ–±–æ—Ç vacuum|—Ä–æ–±–æ—Ç cleaner|dreame|dyson|submarine", desc_low):
        for kw, brand in BRAND_KEYWORDS.items():
            if kw in desc_low:
                return "–ü—ã–ª–µ—Å–æ—Å—ã", brand
        return "–ü—ã–ª–µ—Å–æ—Å—ã", "–û–±—â–µ–µ"

    # --- 5. –ß–∞—Å—ã –∏ –±—Ä–∞—Å–ª–µ—Ç—ã (Garmin, Band, Instinct –∏ –¥—Ä.) ---
    if re.search(r"\b(—á–∞—Å—ã|watch|band|fitbit|amazfit|gtr|gt3|instinct|forerunner|fenix|coros|garmin|band)\b", desc_low):
        for kw, brand in BRAND_KEYWORDS.items():
            if kw in desc_low:
                return "–ß–∞—Å—ã", brand
        return "–ß–∞—Å—ã", "–û–±—â–µ–µ"

    # --- 6. –ü–ª–∞–Ω—à–µ—Ç—ã (Pad, Tab, Tablet, –∫—Ä–æ–º–µ Notepad) ---
    if (re.search(r"\bipad\b|\btab\b|\btablet\b|\bpad\b", desc_low) or re.search(r"pad[\s\d]", desc_low)) and not re.search(r"notepad", desc_low):
        for kw, brand in BRAND_KEYWORDS.items():
            if kw in desc_low:
                return "–ü–ª–∞–Ω—à–µ—Ç—ã", brand
        return "–ü–ª–∞–Ω—à–µ—Ç—ã", "–û–±—â–µ–µ"

    # --- 7. –ù–æ—É—Ç–±—É–∫–∏ (Apple, Matebook, CPU, –¥—é–π–º—ã, –º–æ–¥–µ–ª–∏, book, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞) ---
    # –Ø–≤–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–æ—É—Ç–±—É–∫–∞: 'book' + –¥—é–π–º—ã, –∏–ª–∏ '–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞' (RU –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏ –¥—Ä.)
    if (re.search(r"book", desc_low) and re.search(r"\d{2}\"", desc)) or re.search(r"–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞", desc_low):
        for kw, brand in BRAND_KEYWORDS.items():
            if kw in desc_low:
                return "–ù–æ—É—Ç–±—É–∫–∏", brand
        return "–ù–æ—É—Ç–±—É–∫–∏", "–û–±—â–µ–µ"
    # Apple MacBook: Air/Pro + 13"/14"/15"/16"/M1/M2/M3/M4
    if (re.search(r"macbook|air|pro", desc_low) and (re.search(r"\d{2}\"", desc) or re.search(r"\bm[1-4]\b", desc_low))) or re.search(r"macbook", desc_low):
        return "–ù–æ—É—Ç–±—É–∫–∏", "Apple"
    # Matebook, –Ω–æ—É—Ç–±—É–∫–∏ –¥—Ä—É–≥–∏—Ö –±—Ä–µ–Ω–¥–æ–≤
    if re.search(r"matebook|notebook|ultrabook|chromebook|magicbook|aspire|ideapad|thinkpad|vivobook|zenbook|legion|gigabyte|machenike|lenovo|acer|asus|hp|dell|msi|huawei", desc_low):
        for kw, brand in BRAND_KEYWORDS.items():
            if kw in desc_low:
                return "–ù–æ—É—Ç–±—É–∫–∏", brand
        return "–ù–æ—É—Ç–±—É–∫–∏", "–û–±—â–µ–µ"
    # Intel/AMD CPU + 13"/14"/15"/16"
    if re.search(r"(intel|amd|ryzen|core i[3579]|pentium|celeron)", desc_low) and re.search(r"\d{2}\"", desc):
        return "–ù–æ—É—Ç–±—É–∫–∏", "–û–±—â–µ–µ"

    # --- 7. –¢–µ–ª–µ—Ñ–æ–Ω—ã (Mate X, –±—Ä–µ–Ω–¥—ã, —è–≤–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏) ---
    # Huawei Mate X6 ‚Äî —Ç–µ–ª–µ—Ñ–æ–Ω, Matebook ‚Äî –Ω–æ—É—Ç–±—É–∫
    if re.search(r"matebook", desc_low):
        return "–ù–æ—É—Ç–±—É–∫–∏", "Huawei"
    if re.search(r"mate", desc_low) and not re.search(r"matebook", desc_low):
        return "–¢–µ–ª–µ—Ñ–æ–Ω—ã", "Huawei"
    # –°–º–∞—Ä—Ç—Ñ–æ–Ω—ã –ø–æ –±—Ä–µ–Ω–¥–∞–º –∏ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    # –ò—Å–∫–ª—é—á–∏—Ç—å Mi TV Box –∏–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤/Xiaomi (–µ—â—ë —Ä–∞–∑ –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏)
    if ("mi tv box" in desc_low or "xiaomi tv box" in desc_low):
        return "–î—Ä—É–≥–æ–µ", "–û–±—â–µ–µ"
    phone_kw = ["iphone", "—Å–º–∞—Ä—Ç—Ñ–æ–Ω", "smartphone", "galaxy", "pixel", "zenfone", "oneplus", "realme", "zte", "redmi", "poco", "xiaomi", "samsung", "huawei", "honor"]
    if any(re.search(rf"(?<![–∞-—èa-z0-9]){re.escape(kw)}(?![–∞-—èa-z0-9])", desc_low) for kw in phone_kw):
        for kw, brand in BRAND_KEYWORDS.items():
            if kw in desc_low:
                # –ò—Å–∫–ª—é—á–∏—Ç—å Mi TV Box –∏–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤/Xiaomi
                if brand == "Xiaomi" and ("mi tv box" in desc_low or "xiaomi tv box" in desc_low):
                    return "–î—Ä—É–≥–æ–µ", "–û–±—â–µ–µ"
                return "–¢–µ–ª–µ—Ñ–æ–Ω—ã", brand
        return "–¢–µ–ª–µ—Ñ–æ–Ω—ã", "–û–±—â–µ–µ"


    # --- 8. –ö–Ω–æ–ø–æ—á–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã ---
    if re.search(r"button phone|feature phone|nokia|f\+|digma linx", desc_low):
        for kw, brand in BRAND_KEYWORDS.items():
            if kw in desc_low:
                return "–¢–µ–ª–µ—Ñ–æ–Ω—ã –∫–Ω–æ–ø–æ—á–Ω—ã–µ", brand
        return "–¢–µ–ª–µ—Ñ–æ–Ω—ã –∫–Ω–æ–ø–æ—á–Ω—ã–µ", "–û–±—â–µ–µ"

    # --- 9. –ü—Ä–æ—Ç–∏–≤–æ—É–¥–∞—Ä–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã ---
    if re.search(r"–ø—Ä–æ—Ç–∏–≤–æ—É–¥–∞—Ä–Ω—ã–π|rugged|armor|tank|cyber|mega|blackview|doogee|hotwav|oukitel|unihertz", desc_low):
        for kw, brand in BRAND_KEYWORDS.items():
            if kw in desc_low:
                return "–¢–µ–ª–µ—Ñ–æ–Ω—ã –ø—Ä–æ—Ç–∏–≤–æ—É–¥–∞—Ä–Ω—ã–µ", brand
        return "–¢–µ–ª–µ—Ñ–æ–Ω—ã –ø—Ä–æ—Ç–∏–≤–æ—É–¥–∞—Ä–Ω—ã–µ", "–û–±—â–µ–µ"

    # --- –ù–û–í–û–ï: VR-–≥–∞—Ä–Ω–∏—Ç—É—Ä—ã ---
    if re.search(r"(?:\bvr\b|vr-?—à–ª–µ–º|vr\s?headset|virtual\s+reality|meta\s?quest|oculus|quest(?:\s?(?:2|3|pro))?|htc\s?vive|(?:^|\b)vive\b|pico|valve\s?index|hp\s?reverb|reverb\s?g2|ps\s?vr2?|psvr2?)", desc_low):
        for kw, brand in BRAND_KEYWORDS.items():
            if kw in desc_low:
                return "VR-–≥–∞—Ä–Ω–∏—Ç—É—Ä—ã", brand
        return "VR-–≥–∞—Ä–Ω–∏—Ç—É—Ä—ã", "–û–±—â–µ–µ"
    
    # --- 9. –ò–≥—Ä–æ–≤—ã–µ –∫–æ–Ω—Å–æ–ª–∏ (–±–µ–∑ VR) ---
    if re.search(r"playstation|ps4|ps5|xbox|switch|steam deck|steamdeck|–¥–∂–æ–π—Å—Ç–∏–∫|–∏–≥—Ä–æ–≤–∞—è –∫–æ–Ω—Å–æ–ª—å|–∏–≥—Ä–æ–≤–∞—è –ø—Ä–∏—Å—Ç–∞–≤–∫–∞", desc_low):
        for kw, brand in BRAND_KEYWORDS.items():
            if kw in desc_low:
                return "–ò–≥—Ä–æ–≤—ã–µ –∫–æ–Ω—Å–æ–ª–∏", brand
        return "–ò–≥—Ä–æ–≤—ã–µ –∫–æ–Ω—Å–æ–ª–∏", "–û–±—â–µ–µ"
    
        # --- –ù–û–í–û–ï: –ö–∞–º–µ—Ä—ã –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è ---
    if re.search(r"(–≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏|ip[-\s]?–∫–∞–º–µ—Ä–∞|cctv|security camera|wi-?fi\s?–∫–∞–º–µ—Ä–∞|–¥–æ–º–∞—à–Ω—è—è –∫–∞–º–µ—Ä–∞|ezviz|hikvision|dahua|imou|reolink|tapo)", desc_low):
        for kw, brand in BRAND_KEYWORDS.items():
            if kw in desc_low:
                return "–ö–∞–º–µ—Ä—ã –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è", brand
        return "–ö–∞–º–µ—Ä—ã –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è", "–û–±—â–µ–µ"

    # --- –ù–û–í–û–ï: –ö–≤–∞–¥—Ä–æ–∫–æ–ø—Ç–µ—Ä—ã ---
    if re.search(r"\b(–∫–≤–∞–¥—Ä–æ?–∫–æ–ø—Ç–µ—Ä—ã?|–∫–æ–ø—Ç–µ—Ä|–¥—Ä–æ–Ω|drone|quadcopter|fpv)\b", desc_low):
        for kw, brand in BRAND_KEYWORDS.items():
            if kw in desc_low:
                return "–ö–≤–∞–¥—Ä–æ–∫–æ–ø—Ç–µ—Ä—ã", brand
        return "–ö–≤–∞–¥—Ä–æ–∫–æ–ø—Ç–µ—Ä—ã", "–û–±—â–µ–µ"

    # --- –ù–û–í–û–ï: –ì—Ä–∏–ª–∏ ---
    if re.search(r"\b(–≥—Ä–∏–ª—å|–≥—Ä–∏–ª–∏|–≥—Ä–∏–ª—å–Ω–∏—Ü–∞|—ç–ª–µ–∫—Ç—Ä–æ–≥—Ä–∏–ª—å|–≥–∞–∑–æ–≤—ã–π –≥—Ä–∏–ª—å|—É–≥–æ–ª—å–Ω—ã–π –≥—Ä–∏–ª—å)\b", desc_low):
        for kw, brand in BRAND_KEYWORDS.items():
            if kw in desc_low:
                return "–ì—Ä–∏–ª–∏", brand
        return "–ì—Ä–∏–ª–∏", "–û–±—â–µ–µ"

    # --- –ù–û–í–û–ï: –≠–ª–µ–∫—Ç—Ä–æ–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã ---
    if re.search(r"\b(—à—É—Ä—É–ø–æ–≤—ë—Ä—Ç|—à—É—Ä—É–ø–æ–≤–µ—Ä—Ç|–¥—Ä–µ–ª—å|–ø–µ—Ä—Ñ–æ—Ä–∞—Ç–æ—Ä|–±–æ–ª–≥–∞—Ä–∫–∞|—É–≥–ª–æ—à–ª–∏—Ñ–æ–≤–∞–ª—å–Ω–∞—è|–ª–æ–±–∑–∏–∫|–ø–∏–ª–∞|—à–ª–∏—Ñ–º–∞—à–∏–Ω|—Ñ—Ä–µ–∑–µ—Ä|—Ä–µ–Ω–æ–≤–∞—Ç–æ—Ä|—Å–∞–±–µ–ª—å–Ω–∞—è –ø–∏–ª–∞|–≥–∞–π–∫–æ–≤—ë—Ä—Ç|–≥–∞–π–∫–æ–≤–µ—Ä—Ç|—à—Ç—Ä–æ–±–æ—Ä–µ–∑)\b", desc_low):
        for kw, brand in BRAND_KEYWORDS.items():
            if kw in desc_low:
                return "–≠–ª–µ–∫—Ç—Ä–æ–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", brand
        return "–≠–ª–µ–∫—Ç—Ä–æ–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", "–û–±—â–µ–µ"

    # --- –ù–û–í–û–ï: –ë—Ä–∏—Ç–≤—ã, —Ç—Ä–∏–º–º–µ—Ä—ã ---
    if re.search(r"\b(–±—Ä–∏—Ç–≤–∞|—ç–ª–µ–∫—Ç—Ä–æ–±—Ä–∏—Ç–≤–∞|—Ç—Ä–∏–º–º–µ—Ä|–º–∞—à–∏–Ω–∫–∞ –¥–ª—è —Å—Ç—Ä–∏–∂–∫–∏|—à–µ–π–≤–µ—Ä|shaver|groom)\b", desc_low):
        for kw, brand in BRAND_KEYWORDS.items():
            if kw in desc_low:
                return "–ë—Ä–∏—Ç–≤—ã, —Ç—Ä–∏–º–º–µ—Ä—ã", brand
        return "–ë—Ä–∏—Ç–≤—ã, —Ç—Ä–∏–º–º–µ—Ä—ã", "–û–±—â–µ–µ"

    # --- –ù–û–í–û–ï: –≠–ø–∏–ª—è—Ç–æ—Ä—ã ---
    if re.search(r"\b(—ç–ø–∏–ª—è—Ç–æ—Ä|—Ñ–æ—Ç–æ—ç–ø–∏–ª—è—Ç–æ—Ä|ipl|–ª–∞–∑–µ—Ä–Ω\w*\s—ç–ø–∏–ª—è—Ü\w*)\b", desc_low):
        for kw, brand in BRAND_KEYWORDS.items():
            if kw in desc_low:
                return "–≠–ø–∏–ª—è—Ç–æ—Ä—ã", brand
        return "–≠–ø–∏–ª—è—Ç–æ—Ä—ã", "–û–±—â–µ–µ"

    # --- –ù–û–í–û–ï: –ó—É–±–Ω—ã–µ —â–µ—Ç–∫–∏ ---
    if re.search(r"(–∑—É–±–Ω\w*\s—â(–µ|—ë)—Ç–∫–∞|—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫\w*\s—â(–µ|—ë)—Ç–∫–∞|oral-?b|sonicare|oclean|soocas)", desc_low):
        for kw, brand in BRAND_KEYWORDS.items():
            if kw in desc_low:
                return "–ó—É–±–Ω—ã–µ —â–µ—Ç–∫–∏", brand
        return "–ó—É–±–Ω—ã–µ —â–µ—Ç–∫–∏", "–û–±—â–µ–µ"

    # --- 10. –≠–∫—à–µ–Ω-–∫–∞–º–µ—Ä—ã ---
    if re.search(r"gopro|osmo action|insta360|insta 360|dji|hero", desc_low):
        for kw, brand in BRAND_KEYWORDS.items():
            if kw in desc_low:
                 return "–≠–∫—à–µ–Ω-–∫–∞–º–µ—Ä—ã", brand
        return "–≠–∫—à–µ–Ω-–∫–∞–º–µ—Ä—ã", "–û–±—â–µ–µ"

    # --- 11. –§–µ–Ω-—Å—Ç–∞–π–ª–µ—Ä—ã ---
    if re.search(r"—Ñ–µ–Ω|—Å—Ç–∞–π–ª–µ—Ä|hair dryer|styler|airwrap|supersonic|hd08|hd-08|hd16|hd-16|hs08|hs-08|ht01|ht-01", desc_low):
        return "–§–µ–Ω-—Å—Ç–∞–π–ª–µ—Ä", "–û–±—â–µ–µ"

    # --- 12. –ü—ã–ª–µ—Å–æ—Å—ã ---
    if re.search(r"–ø—ã–ª–µ—Å–æ—Å|vacuum|—Ä–æ–±–æ—Ç-–ø—ã–ª–µ—Å–æ—Å|dyson|dreame|submarine", desc_low):
        for kw, brand in BRAND_KEYWORDS.items():
            if kw in desc_low:
                return "–ü—ã–ª–µ—Å–æ—Å—ã", brand
        return "–ü—ã–ª–µ—Å–æ—Å—ã", "–û–±—â–µ–µ"  

    # --- 13. –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º (fallback) ---
    for cat, keywords in CATEGORY_KEYWORDS:
        if any(kw in desc_low for kw in keywords):
            category = cat
            break

    # --- 14. –ë—Ä–µ–Ω–¥ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º (fallback) ---
    first_word = desc.split()[0].strip(',.;:"()').lower() if desc else ""
    if first_word and first_word in BRAND_KEYWORDS:
        subcategory = BRAND_KEYWORDS[first_word]
    else:
        for kw, brand in BRAND_KEYWORDS.items():
            if kw in desc_low:
                subcategory = brand
                break

    # --- 15. –û—Å–æ–±–æ–µ –ø—Ä–∞–≤–∏–ª–æ: –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ Go Pro –≤—Å–µ–≥–¥–∞ –±—Ä–µ–Ω–¥ GoPro ---
    if category == "Go Pro":
        subcategory = "GoPro"

    return category, subcategory


async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None: 
    """–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ .xlsx, —Å–∫–∞—á–∏–≤–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º."""
    user_id = update.effective_user.id if update.effective_user else None
    awaiting_file = context.user_data.get("awaiting_file")
    if not user_id or not is_admin(user_id) or not awaiting_file:
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å –±–æ—Ç –Ω–µ –æ–∂–∏–¥–∞–µ—Ç —Ñ–∞–π–ª –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∑–∞–≥—Ä—É–∑–∫–∏."
        )
        return

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    context.user_data["awaiting_file"] = False

    document = update.message.document
    if not document:
        return

    if not document.file_name.lower().endswith(".xlsx"):
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlsx. –î—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è."
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    tmp_dir = Path(tempfile.mkdtemp())
    src_path = tmp_dir / document.file_name
    file_obj = await document.get_file()
    await file_obj.download_to_drive(str(src_path))

    try:
        # –ß–∏—Ç–∞–µ–º Excel
        df = pd.read_excel(src_path)
    except Exception as exc:
        await update.message.reply_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –∫–∞–∫ Excel: " f"{exc}"
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥–ª–∏ —Å–∫–∞—á–∏–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é
    try:
        shutil.copy(src_path, LATEST_EXCEL_FILE)
    except Exception:
        pass

    # –°—Ç—Ä–æ–∏–º –∫–∞—Ç–∞–ª–æ–≥ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
    catalog: dict[str, dict[str, list[dict[str, str]]]] = {}
    for _, row in df.iterrows():
        desc = str(row.get("description") or row.get("desription") or "")
        price = row.get("price") or row.get("–¶–µ–Ω–∞") or row.get("Price") or ""
        cat, sub = extract_category(desc)
        catalog.setdefault(cat, {}).setdefault(sub, []).append({"desc": desc, "price": price})

    # === –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ü–ï–†–ï–ù–ï–°–Å–ù–ù–´–• (moved_overrides) –° EXCEL –ò –£–ë–û–†–ö–ê –î–£–ë–õ–ï–ô ===
    def _norm_desc(s: str) -> str:
        import re as _re
        return _re.sub(r"\s+", " ", str(s or "").strip().lower())

    # 1) –ö–∞—Ä—Ç–∞ "–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ -> —Ü–µ–Ω–∞" –∏–∑ Excel
    excel_price_by_desc: dict[str, str] = {}
    for _, row in df.iterrows():
        d = str(row.get("description") or row.get("desription") or "")
        p = row.get("price") or row.get("–¶–µ–Ω–∞") or row.get("Price") or ""
        excel_price_by_desc[_norm_desc(d)] = p

    # 2) –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –≤ moved_overrides –∏ —É–¥–∞–ª—è–µ–º —Ç–µ, –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ Excel
    overrides = context.application.bot_data.get("moved_overrides")
    if overrides is None:
        overrides = _load_moved_overrides()

    changed = False
    to_del_cats = []
    for cat, brands in list(overrides.items()):
        to_del_brands = []
        for brand, items in list(brands.items()):
            new_items = []
            for it in items:
                key = _norm_desc(it.get("desc", ""))
                if key in excel_price_by_desc:
                    new_price = excel_price_by_desc[key]
                    if str(it.get("price", "")) != str(new_price):
                        it["price"] = new_price
                        changed = True
                    new_items.append(it)
                else:
                    # –ü–æ–∑–∏—Ü–∏–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ Excel -> —É–¥–∞–ª—è–µ–º –∏–∑ –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω–Ω—ã—Ö
                    changed = True
            if new_items:
                overrides[cat][brand] = new_items
            else:
                to_del_brands.append(brand)
        for b in to_del_brands:
            del overrides[cat][b]
        if not overrides.get(cat):
            to_del_cats.append(cat)
    for c in to_del_cats:
        del overrides[c]

    if changed:
        _save_moved_overrides(overrides)
        context.application.bot_data["moved_overrides"] = overrides

    # 3) –£–±–∏—Ä–∞–µ–º –∏–∑ –∞–≤—Ç–æ-–∫–∞—Ç–∞–ª–æ–≥–∞ –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏, —á—Ç–æ —É–∂–µ –µ—Å—Ç—å –≤ moved_overrides –ò–õ–ò manual_categories
    manual = context.application.bot_data.get("manual_categories") or _load_manual_categories()

    occupied_descs = {
        _norm_desc(mi.get("desc", ""))
        for source in (overrides, manual)
        for brands in source.values()
        for sublist in brands.values()
        for mi in sublist
    }

    for cat_key in list(catalog.keys()):
        for sub_key in list(catalog[cat_key].keys()):
            filtered = [
                item for item in catalog[cat_key][sub_key]
                if _norm_desc(item.get("desc", "")) not in occupied_descs
            ]
            if filtered:
                catalog[cat_key][sub_key] = filtered
            else:
                del catalog[cat_key][sub_key]
        if not catalog.get(cat_key):
            del catalog[cat_key]
    # === –ö–û–ù–ï–¶ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò ===

    if not catalog:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–∞–ª–æ–≥ –≤ bot_data (–æ–±—â–∏–π –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    context.application.bot_data["catalog"] = catalog
    # –ê —Ç–∞–∫–∂–µ –Ω–∞ –¥–∏—Å–∫, —á—Ç–æ–±—ã –∫–∞—Ç–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω—è–ª—Å—è –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏ –±–æ—Ç–∞
    _save_catalog_to_disk(catalog)

    # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    await update.message.reply_text("–ö–∞—Ç–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω, –Ω–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏")

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    try:
        os.remove(src_path)
        os.rmdir(tmp_dir)
    except OSError:
        pass


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é."""
    import re

    text = update.message.text
    user_id = update.effective_user.id if update.effective_user else None
    is_admin_user = user_id and is_admin(user_id)

    # --- –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω: —à–∞–≥ 1 ‚Äî –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–æ–∫ ---
    if context.user_data.get("manualprice_step") == "awaiting_indices":
        raw = (text or "").strip()
        parts = re.split(r"[,\s]+", raw)
        idxs = set()
        try:
            for part in parts:
                if not part:
                    continue
                if "-" in part:
                    a, b = map(int, part.split("-", 1))
                    if a > b:
                        a, b = b, a
                    idxs.update(range(a, b + 1))
                else:
                    idxs.add(int(part))
        except Exception:
            await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 1-3,5")
            return
    
        indices = sorted({i - 1 for i in idxs if i > 0})
        if not indices:
            await update.message.reply_text("–ù–µ –≤—ã–±—Ä–∞–Ω—ã —Å—Ç—Ä–æ–∫–∏. –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1-3,5")
            return
    
        context.user_data["manualprice_indices"] = indices
        context.user_data["manualprice_step"] = "awaiting_price"
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É (–æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–æ –∫–æ –≤—Å–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç–æ–≤–∞—Ä–∞–º):")
        return
    
    # --- –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω: —à–∞–≥ 2 ‚Äî –≤–≤–æ–¥ –Ω–æ–≤–æ–π —Ü–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ---
    if context.user_data.get("manualprice_step") == "awaiting_price":
        new_price = (text or "").strip()
        if not new_price:
            await update.message.reply_text("–¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
            return
    
        cat = context.user_data.pop("manualprice_cat", None)
        brand = context.user_data.pop("manualprice_brand", None)
        indices = context.user_data.pop("manualprice_indices", [])
        context.user_data.pop("manualprice_step", None)
    
        manual = context.application.bot_data.get("manual_categories", {}) or _load_manual_categories()
        items = manual.get(cat, {}).get(brand, [])
    
        updated = 0
        for i in indices:
            if 0 <= i < len(items):
                items[i]["price"] = new_price
                items[i]["price_locked"] = True
                updated += 1
    
        _save_manual_categories(manual)
        context.application.bot_data["manual_categories"] = manual
    
        await update.message.reply_text(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ü–µ–Ω: {updated} —à—Ç. –≤ {cat} / {brand}.")
        # –≤–µ—Ä–Ω—ë–º—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (–µ—Å–ª–∏ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
        try:
            await show_admin_panel(update, context)
        except NameError:
            pass
        return

    # --- 0.1. –ü–æ—à–∞–≥–æ–≤–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä—É—á–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏/–±—Ä–µ–Ω–¥–∞/—Ç–æ–≤–∞—Ä–æ–≤ ---
    if context.user_data.get("manualcat_step"):
        step = context.user_data["manualcat_step"]
        user_id = update.effective_user.id if update.effective_user else None
        if not user_id or not is_admin(user_id):
            await update.message.reply_text("–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")
            context.user_data.pop("manualcat_step", None)
            return

        if step == 1:
            # –ü–æ–ª—É—á–∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            cat = text.strip()
            if not cat:
                await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:")
                return
            context.user_data["manualcat_category"] = cat
            context.user_data["manualcat_step"] = 2
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ (–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏):")
            return

        elif step == 2:
            # –ü–æ–ª—É—á–∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞
            brand = text.strip()
            if not brand:
                await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:")
                return
            context.user_data["manualcat_brand"] = brand
            context.user_data["manualcat_step"] = 3
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏ —Ü–µ–Ω—É.\n–ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞: –û–ø–∏—Å–∞–Ω–∏–µ;–¶–µ–Ω–∞\n\n –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—É—Å—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–≤–µ–¥–∏—Ç–µ '0'.\n\n"
            )
            context.user_data["manualcat_items"] = []
            return

        elif step == 3:
                        # ‚Äî‚Äî‚Äî –ï—Å–ª–∏ –≤–≤–µ–ª–∏ "0" ‚Äî —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –≤—ã—Ö–æ–¥–∏–º ‚Äî‚Äî‚Äî
            if text.strip() == "0":
                cat = context.user_data.pop("manualcat_category")
                brand = context.user_data.pop("manualcat_brand")
                context.user_data.pop("manualcat_step", None)

                # –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å manual_categories
                manual_cats = context.application.bot_data.get("manual_categories")
                if manual_cats is None:
                    manual_cats = _load_manual_categories()

                # –°–æ–∑–¥–∞—Ç—å –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –Ω–æ–≤–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                manual_cats.setdefault(cat, {})[brand] = []
                context.application.bot_data["manual_categories"] = manual_cats
                _save_manual_categories(manual_cats)

                # –û—Ç–≤–µ—Ç–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                buttons = [
                    [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë", callback_data="manualcat_add")],
                    [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="manualcat_remove")]
                ]
                markup = InlineKeyboardMarkup(buttons)
                await update.message.reply_text(
                    f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø—É—Å—Ç–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: <b>{cat}</b> / <i>{brand}</i>.\n\n"
                    "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –Ω–µ—ë —Ç–æ–≤–∞—Ä—ã –∏–ª–∏ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —á—Ç–æ-—Ç–æ –ø–æ–∑–∂–µ.",
                    reply_markup=markup,
                    parse_mode="HTML"
                )
                await show_admin_panel(update, context)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã (–º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ, –¥–æ '–ì–æ—Ç–æ–≤–æ')
            if text.strip().lower() == "–≥–æ—Ç–æ–≤–æ":
                await update.message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ (–∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞: –û–ø–∏—Å–∞–Ω–∏–µ;–¶–µ–Ω–∞). "
                    "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start."
                )
                return

            # –û–∂–∏–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤, –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞: –û–ø–∏—Å–∞–Ω–∏–µ;–¶–µ–Ω–∞
            lines = [line for line in text.splitlines() if line.strip()]
            items = []
            for line in lines:
                parts = line.split(";")
                if len(parts) < 2:
                    continue  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                desc = parts[0].strip()
                price = parts[1].strip()
                if not desc or not price:
                    continue
                items.append({"desc": desc, "price": price, "price_locked": True, "origin": "manual"})

            if items:
                cat = context.user_data.pop("manualcat_category")
                brand = context.user_data.pop("manualcat_brand")
                context.user_data.pop("manualcat_step", None)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ manual_categories.json
                manual_cats = context.application.bot_data.get("manual_categories")
                if manual_cats is None:
                    manual_cats = _load_manual_categories()
                manual_cats.setdefault(cat, {}).setdefault(brand, []).extend(items)
                context.application.bot_data["manual_categories"] = manual_cats
                _save_manual_categories(manual_cats)

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Ä—É—á–Ω—É—é –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                lines = []
                for c, brands in manual_cats.items():
                    for b, its in brands.items():
                        lines.append(f"<b>{c}</b> / <i>{b}</i>: {len(its)} –ø–æ–∑–∏—Ü–∏–π")
                msg = "–í—Ä—É—á–Ω—É—é –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n" + "\n".join(lines)
                buttons = [
                    [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å", callback_data="manualcat_add")],
                    [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å", callback_data="manualcat_remove")],
                ]
                markup = InlineKeyboardMarkup(buttons)
                await update.message.reply_text(
                    f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ {cat} / {brand}: {len(items)} –ø–æ–∑–∏—Ü–∏–π.\n\n{msg}",
                    reply_markup=markup,
                    parse_mode="HTML"
                )
                await show_admin_panel(update, context)
            else:
                await update.message.reply_text(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –û–ø–∏—Å–∞–Ω–∏–µ;–¶–µ–Ω–∞."
                )
            return

    # --- 0.2. –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é ---
    if context.user_data.get("manualprod_step") and context.user_data["manualprod_step"] == 1:
        # –°–±–æ—Ä –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
        text_in = update.message.text
        if text_in.strip().lower() == "–≥–æ—Ç–æ–≤–æ":
            await update.message.reply_text(
                "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ."
            )
            context.user_data.pop("manualprod_step", None)
            return

        lines = [l for l in text_in.splitlines() if l.strip()]
        items = []
        for line in lines:
            parts = line.split(";")
            if len(parts) < 2:
                continue
            desc, price = parts[0].strip(), parts[1].strip()
            if desc and price:
                items.append({"desc": desc, "price": price, "price_locked": True, "origin": "manual"})

        if items:
            cat = context.user_data.pop("manualprod_cat")
            brand = context.user_data.pop("manualprod_brand")
            context.user_data.pop("manualprod_step", None)

            manual_cats = context.application.bot_data.get("manual_categories") or _load_manual_categories()
            manual_cats.setdefault(cat, {}).setdefault(brand, []).extend(items)
            _save_manual_categories(manual_cats)
            context.application.bot_data["manual_categories"] = manual_cats

            await update.message.reply_text(
                f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ {cat} / {brand}: {len(items)} –ø–æ–∑–∏—Ü–∏–π."
            )
            await show_admin_panel(update, context)
        else:
            await update.message.reply_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –Ω–∏ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –û–ø–∏—Å–∞–Ω–∏–µ;–¶–µ–Ω–∞."
            )
        return

    # --- –®–∞–≥ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –≤–≤–æ–¥–∏–º—ã–º –Ω–æ–º–µ—Ä–∞–º ---
    if context.user_data.get("manualprod_step") == "awaiting_manualprod_delete":
        raw = update.message.text.strip()
        parts = re.split(r"[,\s]+", raw)
        idxs = set()
        for part in parts:
            if "-" in part:
                a, b = map(int, part.split("-", 1))
                idxs.update(range(a, b + 1))
            else:
                idxs.add(int(part))

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ 0-based –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é, —á—Ç–æ–±—ã —É–¥–∞–ª—è—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        indices = sorted({i - 1 for i in idxs if i > 0}, reverse=True)

        # –î–æ—Å—Ç–∞—ë–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        cat = context.user_data.pop("manualprod_cat", None)
        brand = context.user_data.pop("manualprod_brand", None)
        context.user_data.pop("manualprod_step", None)

        manual = context.application.bot_data.get("manual_categories", {}) or _load_manual_categories()
        items = manual.get(cat, {}).get(brand, [])

        removed = []
        for i in indices:
            if 0 <= i < len(items):
                removed.append(items.pop(i))

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        _save_manual_categories(manual)
        context.application.bot_data["manual_categories"] = manual

        if removed:
            lines = []
            for it in removed:
                d = html.escape(it.get("desc", ""))
                p = html.escape(str(it.get("price", "")))
                lines.append(f"‚Äî {d} ({p})")
            await update.message.reply_text(
                "<b>–£–¥–∞–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤:</b> {}\n\n{}".format(len(removed), "\n".join(lines)),
                parse_mode=ParseMode.HTML
            )
            await show_admin_panel(update, context)
        else:
            await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª–µ–Ω–æ (–Ω–µ–≤–µ—Ä–Ω—ã–µ –Ω–æ–º–µ—Ä–∞).")
        return

    # --- 0.3. –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ user_id –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ ---
    if context.user_data.get("awaiting_admin_action"):
        action = context.user_data.pop("awaiting_admin_action")
        user_id = update.effective_user.id if update.effective_user else None
        if not user_id or not is_admin(user_id):
            await update.message.reply_text("–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–≤.")
            return
        try:
            target_id = int(text.strip())
        except ValueError:
            await update.message.reply_text("user_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return

        admins = _load_admins()
        if action == "add":
            admins.add(target_id)
            _save_admins(admins)
            await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã.")
        elif action == "remove":
            if target_id in admins:
                admins.remove(target_id)
                _save_admins(admins)
                await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —É–¥–∞–ª—ë–Ω –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
            else:
                await update.message.reply_text("–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤.")
        return

    # --- 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∂–∏–º–∞ –ø–æ–∏—Å–∫–∞ ---
    if context.user_data.pop("awaiting_search", False):
        # 1) –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–∞–ø—Ä–æ—Å
        raw = (text or "").strip()
        if not raw:
            await update.message.reply_text("–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return
        q = raw.lower()
        q = re.sub(r'([a-z–∞-—è—ë])(\d)', r'\1 \2', q)
        q = re.sub(r'(\d)([a-z–∞-—è—ë])', r'\1 \2', q)

        # 2.1) –°–ü–ï–¶-–°–õ–£–ß–ê–ô: ¬´macbook¬ª –∏ –µ–≥–æ –≤–∞—Ä–∏–∞—Ü–∏–∏ ‚Üí —Ç–æ–ª—å–∫–æ –ù–æ—É—Ç–±—É–∫–∏ / Apple
        mac = q.replace(" ", "")
        if mac.startswith("macbook"):
            full_catalog = get_full_catalog(context)
            results = [
                ("–ù–æ—É—Ç–±—É–∫–∏", "Apple", item)
                for item in full_catalog.get("–ù–æ—É—Ç–±—É–∫–∏", {}).get("Apple", [])
            ]
            if not results:
                await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")
                return

            await update.message.reply_text(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π: {len(results)}")
            back_markup = InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="back|root")]]
            )

            lines = []
            for cat, sub, item in results:
                desc = html.escape(item["desc"])
                price = str(item.get("price", "")).strip()
                line = f"<b>{desc}</b>"
                if price:
                    line += f" ‚Äî <i>{html.escape(price)} ‚ÇΩ</i>"
                line += f"\n<i>{cat} / {sub}</i>"
                lines.extend([line, ""])

            MAX_LEN = 4000
            chunks = []
            cur = ""
            for l in lines:
                seg = l + "\n"
                if len(cur) + len(seg) > MAX_LEN and cur:
                    chunks.append(cur)
                    cur = seg
                else:
                    cur += seg
            if cur:
                chunks.append(cur)

            for idx, chunk in enumerate(chunks):
                if idx == len(chunks) - 1:
                    await update.message.reply_text(chunk, parse_mode="HTML", reply_markup=back_markup)
                else:
                    await update.message.reply_text(chunk, parse_mode="HTML")
            return

        full_catalog = get_full_catalog(context)
        if not full_catalog:
            await update.message.reply_text("–ö–∞—Ç–∞–ª–æ–≥ –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        # 3) –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results: list[tuple[str, str, dict]] = []
        brand_subs = {sub.lower() for subs in full_catalog.values() for sub in subs}
        if q in brand_subs:
            for cat, subs in full_catalog.items():
                for sub, items in subs.items():
                    if sub.lower() == q:
                        for item in items:
                            results.append((cat, sub, item))
        else:
            matched_cats = [
                cat for cat in full_catalog
                if cat.lower() == q or cat.lower().startswith(q) or q.startswith(cat.lower())
            ]
            if matched_cats:
                for cat in matched_cats:
                    for sub, items in full_catalog[cat].items():
                        for item in items:
                            results.append((cat, sub, item))
            else:
                for cat, subs in full_catalog.items():
                    for sub, items in subs.items():
                        for item in items:
                            desc = str(item.get("desc", "")).lower()
                            d = re.sub(r'([a-z–∞-—è—ë])(\d)', r'\1 \2', desc)
                            d = re.sub(r'(\d)([a-z–∞-—è—ë])', r'\1 \2', d)
                            if q in d:
                                results.append((cat, sub, item))

        if not results:
            await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")
            return

        await update.message.reply_text(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π: {len(results)}")
        back_markup = InlineKeyboardMarkup(
            [[InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="back|root")]]
        )

        lines = []
        for cat, sub, item in results:
            desc = html.escape(str(item["desc"]))
            price = str(item.get("price", "")).strip()
            line = f"<b>{desc}</b>"
            if price:
                line += f" ‚Äî <i>{html.escape(price)} ‚ÇΩ</i>"
            line += f"\n<i>{cat} / {sub}</i>"
            lines.extend([line, ""])

        MAX_LEN = 4000
        chunks = []
        current = ""
        for l in lines:
            segment = l + "\n"
            if len(current) + len(segment) > MAX_LEN and current:
                chunks.append(current)
                current = segment
            else:
                current += segment
        if current:
            chunks.append(current)

        for idx, chunk in enumerate(chunks):
            if idx == len(chunks) - 1:
                await update.message.reply_text(chunk, parse_mode="HTML", reply_markup=back_markup)
            else:
                await update.message.reply_text(chunk, parse_mode="HTML")
        return

    # --- –®–∞–≥ 3.1: –ø–∞—Ä—Å–∏–º –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ ---
    if context.user_data.get("change_step") == "awaiting_selection":
        raw = (update.message.text or "").strip()
        import re
        parts = re.split(r"[,\s]+", raw)
        idxs = set()
        try:
            for part in parts:
                if not part:
                    continue
                if "-" in part:
                    a, b = map(int, part.split("-", 1))
                    if a > b:
                        a, b = b, a
                    idxs.update(range(a, b + 1))
                else:
                    idxs.add(int(part))
        except Exception:
            await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 1-3,6")
            return

        zero_based = sorted({i - 1 for i in idxs if i > 0})
        sel_map = context.user_data.get("change_selection_map") or []
        picks = []
        for i in zero_based:
            if 0 <= i < len(sel_map):
                picks.append(sel_map[i])

        if not picks:
            await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ. –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –Ω–æ–º–µ—Ä–∞.")
            return

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã (–∏—Å—Ç–æ—á–Ω–∏–∫ + –∏–Ω–¥–µ–∫—Å + desc/price –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è)
        context.user_data["change_picks"] = picks
    
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–∏–∑ –ø–æ–ª–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞)
        context.user_data["change_step"] = "awaiting_new_cat"
        full = get_full_catalog(context)
        buttons = [[InlineKeyboardButton(cat, callback_data=f"newcat|{cat}")] for cat in full.keys()]
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ <b>–Ω–æ–≤—É—é</b> –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=InlineKeyboardMarkup(buttons), parse_mode=ParseMode.HTML)
        return

    # --- 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ ---
    if text == BTN_ADMIN_PANEL and is_admin_user:
        admin_buttons = [
            [InlineKeyboardButton("üì• –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥ (.xlsx)", callback_data="adminpanel_add_catalog")],
            [InlineKeyboardButton("üîÄ –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤", callback_data="adminpanel_change_category")],
            [InlineKeyboardButton("üìù –†—É—á–Ω—ã–µ (manual)", callback_data="adminpanel_manual_root")],
            [InlineKeyboardButton("üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏", callback_data="adminpanel_edit_admins")],
        ]
        markup = InlineKeyboardMarkup(admin_buttons)
        await update.message.reply_text("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=markup)
        return

    if text == BTN_SEARCH_CATALOG:
        context.user_data["awaiting_search"] = True
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É:")
        return

    if text == BTN_CHOOSE_CATEGORY:
        full_catalog = get_full_catalog(context)
        if full_catalog:
            buttons = []
            for cat_name in _sort_categories(list(full_catalog.keys())):
                subdict = full_catalog[cat_name]
                count = sum(len(items) for items in subdict.values())
                buttons.append([InlineKeyboardButton(
                    text=f"{cat_name} ({count})",
                    callback_data=f"cat|{cat_name}"
                )])
            markup = InlineKeyboardMarkup(buttons)
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)
        else:
            await update.message.reply_text("–ö–∞—Ç–∞–ª–æ–≥ –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    if text == BTN_CONTACT_MANAGER:
        link_btn_tg = InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É –≤ –¢–µ–ª–µ–≥—Ä–∞–º", url=MANAGER_TELEGRAM_LINK)
        link_btn_wa = InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É –≤ WhatsApp", url=MANAGER_WHATSAPP_LINK)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏ —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º:",
            reply_markup=InlineKeyboardMarkup([[link_btn_tg], [link_btn_wa]]),
        )
        return

    elif text == BTN_GET_EXCEL:
        import pandas as pd
        import tempfile, os
    
        full_catalog = get_full_catalog(context)
    
        # 1) –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥ —Ç—Ä–µ–±—É–µ–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã xmlid/description/price
        rows = []
        for cat, subdict in full_catalog.items():
            for sub, items in subdict.items():
                for item in items:
                    rows.append({
                        "xmlid": f"{cat}/{sub}",                          # –ö–∞—Ç–µ–≥–æ—Ä–∏—è/–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è
                        "description": str(item.get("desc", "")),         # –û–ø–∏—Å–∞–Ω–∏–µ
                        "price": item.get("price", "")                    # –¶–µ–Ω–∞ (–ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∏–∂–µ –≤ —á–∏—Å–ª–æ)
                    })
    
        if not rows:
            await update.message.reply_text("–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç.")
            return
    
        # 2) DataFrame –≤ –Ω—É–∂–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ —Å—Ç–æ–ª–±—Ü–æ–≤
        df = pd.DataFrame(rows, columns=["xmlid", "description", "price"])
    
        # 3) –ü—Ä–∏–≤–æ–¥–∏–º price –∫ —á–∏—Å–ª–æ–≤–æ–º—É –≤–∏–¥—É (int), –≤—ã—Ç–∞—Å–∫–∏–≤–∞—è —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
        def _to_int(v):
            s = str(v)
            digits = "".join(ch for ch in s if ch.isdigit())
            return int(digits) if digits else None
    
        df["price"] = df["price"].apply(_to_int)
    
        # 4) –ü–∏—à–µ–º XLSX: —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º xlsxwriter (–ª—É—á—à–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å —Ñ–æ—Ä–º–∞—Ç–æ–≤), –∏–Ω–∞—á–µ openpyxl
        tmp = tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx")
        tmp_path = tmp.name
        tmp.close()
    
        try:
            try:
                import xlsxwriter  # –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º
    
                with pd.ExcelWriter(tmp_path, engine="xlsxwriter") as writer:
                    sheet_name = "catalog"
                    df.to_excel(writer, index=False, sheet_name=sheet_name)
    
                    workbook  = writer.book
                    worksheet = writer.sheets[sheet_name]
    
                    # –ö–æ–ª–æ–Ω–∫–∏: 0=xmlid, 1=description, 2=price
                    # –ß–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è price: #,##0 (–±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –∫–∞–∫ 75,000)
                    price_fmt = workbook.add_format({"num_format": "#,##0"})
                    worksheet.set_column(0, 0, 24)           # xmlid
                    worksheet.set_column(1, 1, 48)           # description
                    worksheet.set_column(2, 2, 12, price_fmt)  # price (—Å —Ñ–æ—Ä–º–∞—Ç–æ–º)
    
            except ImportError:
                # –§–æ–ª–±—ç–∫: openpyxl ‚Äî —Ç–æ–∂–µ –∑–∞–¥–∞—ë–º —Ñ–æ—Ä–º–∞—Ç #,##0 –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞ price
                from openpyxl.styles import numbers
                from openpyxl.utils import get_column_letter
    
                with pd.ExcelWriter(tmp_path, engine="openpyxl") as writer:
                    sheet_name = "catalog"
                    df.to_excel(writer, index=False, sheet_name=sheet_name)
                    ws = writer.sheets[sheet_name]
    
                    # –®–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
                    ws.column_dimensions[get_column_letter(1)].width = 24   # xmlid
                    ws.column_dimensions[get_column_letter(2)].width = 48   # description
                    ws.column_dimensions[get_column_letter(3)].width = 12   # price
    
                    # –§–æ—Ä–º–∞—Ç –¥–ª—è price (–∫–æ–ª–æ–Ω–∫–∞ C, –∏–Ω–¥–µ–∫—Å 3 –≤ 1-based)
                    price_col = 3
                    for row in range(2, len(df) + 2):  # –Ω–∞—á–∏–Ω–∞—è —Å–æ 2-–π —Å—Ç—Ä–æ–∫–∏ (–ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
                        cell = ws.cell(row=row, column=price_col)
                        # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–∞–º —á–∏—Å–ª–æ (None/–ø—É—Å—Ç—ã–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º)
                        if isinstance(cell.value, (int, float)):
                            cell.number_format = "#,##0"
    
            await update.message.reply_document(document=open(tmp_path, "rb"), filename="catalog.xlsx")
            return
    
        except Exception as exc:
            await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª: {exc}")
            return
    
        finally:
            try:
                os.remove(tmp_path)
            except Exception:
                pass


    if text == BTN_SUBSCRIBE:
        subs: set[int] = context.application.bot_data.setdefault("subscribers", set())
        if user_id:
            subs.add(user_id)
            await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.")
        return

    # --- 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
    await update.message.reply_text(
        "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ.",
        reply_markup=get_main_menu_markup(is_admin_user),
    )

async def callback_query_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    data = query.data or ""

    if data == "adminpanel_manual_root":
        submenu = [
            [InlineKeyboardButton("üóÇÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏", callback_data="adminpanel_edit_category")],
            [InlineKeyboardButton("üì¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏", callback_data="adminpanel_edit_products")],
            [InlineKeyboardButton("üí≤ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—ã", callback_data="adminpanel_edit_prices")],
            [InlineKeyboardButton("‚Üê –ù–∞–∑–∞–¥", callback_data="adminpanel_back")],
        ]
        await query.edit_message_text("–†–∞–∑–¥–µ–ª ¬´–†—É—á–Ω—ã–µ (manual_categories.json)¬ª:", reply_markup=InlineKeyboardMarkup(submenu))
        return
    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ ---
    if data == "adminpanel_back":
        # –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        user_id = update.effective_user.id if update.effective_user else None
        is_admin_user = user_id and is_admin(user_id)
        await query.edit_message_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:")
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu_markup(is_admin_user))
        return
    if data == "adminpanel_add_catalog":
        # –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /add_catalog
        await add_catalog_command(update, context)
        await query.answer()
        return
    if data == "adminpanel_edit_category":
        await edit_category_command(update, context)
        await query.answer()
        return
    
    if data == "adminpanel_edit_products":
        # 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
        user_id = query.from_user.id
        if not is_admin(user_id):
            # —à–ª—ë–º –∞–ª–µ—Ä—Ç, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–º—É —á–∞—Ç—É
            await query.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", show_alert=True)
            return

        # 2) –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Ä—É—á–Ω—É—é –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏/–±—Ä–µ–Ω–¥—ã
        manual_cats = context.application.bot_data.get("manual_categories")
        if manual_cats is None:
            manual_cats = _load_manual_categories()
            context.application.bot_data["manual_categories"] = manual_cats

        # 3) –°–æ–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ ¬´–ö–∞—Ç–µ–≥–æ—Ä–∏—è / –ë—Ä–µ–Ω–¥¬ª
        buttons = []
        cb_map = {}
        idx = 0
        for cat, brands in manual_cats.items():
            for brand in brands:
                key = f"manualprod_select|{idx}"
                cb_map[key] = (cat, brand)
                buttons.append([InlineKeyboardButton(f"{cat} / {brand}", callback_data=key)])
                idx += 1

        if not buttons:
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            await query.edit_message_text("–ù–µ—Ç –≤—Ä—É—á–Ω—É—é –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏.")
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º mapping –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            context.user_data["manualprod_select_map"] = cb_map
            markup = InlineKeyboardMarkup(buttons)
            await query.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤:",
                reply_markup=markup
            )

        await query.answer()
        return

    if data == "adminpanel_edit_admins":
        await edit_admins_command(update, context)
        await query.answer()
        return
    
    # --- –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤ ---
    if data == "adminpanel_change_category":
        user_id = query.from_user.id
        if not is_admin(user_id):
            await query.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", show_alert=True)
            return

        full = get_full_catalog(context)
        if not full:
            await query.edit_message_text("–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç.")
            return

        # –ö–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –æ–±—â–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–∑–∏—Ü–∏–π (auto + moved + manual)
        buttons = []
        for cat_name in _sort_categories(list(full.keys())):
            subdict = full.get(cat_name, {})
            count = sum(len(items) for items in subdict.values())
            buttons.append([InlineKeyboardButton(f"{cat_name} ({count})", callback_data=f"change|cat|{cat_name}")])

        context.user_data["change_step"] = "awaiting_cat"
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –ø–µ—Ä–µ–Ω–æ—Å–∏–º:", reply_markup=InlineKeyboardMarkup(buttons))
        return

    # –®–∞–≥ 2: –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è change|cat|<–∫–∞—Ç–µ–≥–æ—Ä–∏—è> ‚Äî –≤—ã–±–æ—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if data.startswith("change|cat|"):
        _, _, cat = data.split("|", 2)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        context.user_data["change_cat"] = cat
        context.user_data["change_step"] = "awaiting_sub"

        auto   = (context.application.bot_data.get("catalog") or {}).get(cat, {}) or {}
        moved  = (context.application.bot_data.get("moved_overrides") or {}).get(cat, {}) or {}
        manual = (context.application.bot_data.get("manual_categories") or {}).get(cat, {}) or {}

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Å—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        all_subs = sorted(set(auto.keys()) | set(moved.keys()) | set(manual.keys()))
        if not all_subs:
            await query.edit_message_text("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
            return

        buttons = []
        for sub in all_subs:
            cnt = len(auto.get(sub, [])) + len(moved.get(sub, [])) + len(manual.get(sub, []))
            buttons.append([InlineKeyboardButton(f"{sub} ({cnt})", callback_data=f"change|sub|{cat}|{sub}")])

        await query.edit_message_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {cat}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=InlineKeyboardMarkup(buttons))
        return


    # –®–∞–≥ 3: –ø–æ—Å–ª–µ on change|sub|<cat>|<sub> ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤, –∂–¥—ë–º –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–æ–≤
    if data.startswith("change|sub|"):
        _, _, cat, sub = data.split("|", 3)

        context.user_data["change_cat"] = cat
        context.user_data["change_sub"] = sub
        context.user_data["change_step"] = "awaiting_selection"

        auto_list   = (context.application.bot_data.get("catalog") or {}).get(cat, {}).get(sub, []) or []
        moved_list  = (context.application.bot_data.get("moved_overrides") or {}).get(cat, {}).get(sub, []) or []
        manual_list = (context.application.bot_data.get("manual_categories") or {}).get(cat, {}).get(sub, []) or []

        # –°—Ç—Ä–æ–∏–º –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –∏ map "–Ω–æ–º–µ—Ä -> –∏—Å—Ç–æ—á–Ω–∏–∫"
        lines = [f"<b>{cat} / {sub}</b>", "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1-3,6)", ""]
        selection_map = []  # —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π: {"src": "auto|moved|manual", "idx": int, "desc": str, "price": str}

        idx = 1
        def _add_block(title, src, lst):
            nonlocal idx, lines, selection_map
            if lst:
                lines.append(f"<i>{title}</i>")
                for i, it in enumerate(lst):
                    d = html.escape(str(it.get("desc", "")))
                    p = html.escape(str(it.get("price", "")))
                    lines.append(f"{idx}. {d} ‚Äî {p}")
                    selection_map.append({"src": src, "idx": i, "desc": str(it.get("desc","")), "price": str(it.get("price",""))})
                    idx += 1
                lines.append("")

        _add_block("–ê–≤—Ç–æ-–∫–∞—Ç–∞–ª–æ–≥", "auto", auto_list)
        _add_block("–ü–µ—Ä–µ–Ω–µ—Å—ë–Ω–Ω—ã–µ", "moved", moved_list)
        _add_block("–†—É—á–Ω—ã–µ", "manual", manual_list)

        if not selection_map:
            await query.edit_message_text("–í —ç—Ç–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
            return

        context.user_data["change_selection_map"] = selection_map
        await query.edit_message_text("\n".join(lines), parse_mode=ParseMode.HTML)
        return
    
        # --- –®–∞–≥ 4: –≤—ã–±–æ—Ä –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ---
    if data.startswith("newcat|") and context.user_data.get("change_step") == "awaiting_new_cat":
        _, new_cat = data.split("|",1)
        context.user_data["new_cat"] = new_cat
        full = get_full_catalog(context)
        subs = full.get(new_cat, {})
        buttons = [
            [InlineKeyboardButton(f"{sub} ({len(items)})", callback_data=f"newsub|{new_cat}|{sub}")]
            for sub, items in subs.items()
        ]
        await query.edit_message_text(
            f"*–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è:* {new_cat}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode=ParseMode.MARKDOWN
        )
        return

    # --- –®–∞–≥ 5: –≤—ã–±–æ—Ä –Ω–æ–≤–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–µ—Ä–µ–Ω–æ—Å ---
    if data.startswith("newsub|") and context.user_data.get("change_step") == "awaiting_new_cat":
        _, new_cat, new_sub = data.split("|", 2)
    
        # –û—Ç–∫—É–¥–∞ –ø–µ—Ä–µ–Ω–æ—Å–∏–º
        src_cat = context.user_data.pop("change_cat")
        src_sub = context.user_data.pop("change_sub")
        picks   = context.user_data.pop("change_picks", [])
        context.user_data.pop("change_selection_map", None)
        context.user_data.pop("change_step", None)
    
        auto_cat = context.application.bot_data.get("catalog") or {}
        overrides = context.application.bot_data.get("moved_overrides") or _load_moved_overrides()
        manual    = context.application.bot_data.get("manual_categories") or _load_manual_categories()
    
        moved_cnt = 0
    
        # –£—Ç–∏–ª–∏—Ç–∞: –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ desc+price
        def _remove_by_desc_price(lst, desc, price):
            for j, it in enumerate(lst):
                if str(it.get("desc","")) == desc and str(it.get("price","")) == price:
                    lst.pop(j)
                    return True
            return False
    
        # 1) –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–≤—Ç–æ-—Ç–æ–≤–∞—Ä—ã: auto -> moved_overrides (—Å orig_cat/sub)
        auto_list = auto_cat.get(src_cat, {}).get(src_sub, [])
        for pick in [p for p in picks if p["src"] == "auto"]:
            desc, price = pick["desc"], pick["price"]
            if _remove_by_desc_price(auto_list, desc, price):
                overrides.setdefault(new_cat, {}).setdefault(new_sub, []).append({
                    "desc": desc,
                    "price": price,
                    "origin": "auto",
                    "orig_cat": src_cat,
                    "orig_sub": src_sub,
                })
                moved_cnt += 1
    
        # 2) –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω–Ω—ã–µ: moved_overrides -> moved_overrides (orig_* –Ω–µ –º–µ–Ω—è–µ–º)
        moved_list = overrides.get(src_cat, {}).get(src_sub, [])
        moved_to_keep = []
        for it in moved_list:
            # –≤—ã—è—Å–Ω—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —ç—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç
            chosen = any(p["src"] == "moved" and p["desc"] == str(it.get("desc","")) and p["price"] == str(it.get("price","")) for p in picks)
            if chosen:
                overrides.setdefault(new_cat, {}).setdefault(new_sub, []).append(it)  # –ø–µ—Ä–µ–Ω–æ—Å–∏–º –∫–∞–∫ –µ—Å—Ç—å
                moved_cnt += 1
            else:
                moved_to_keep.append(it)
        if moved_list is not None:
            # –æ–±–Ω–æ–≤–ª—è–µ–º/—É–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –≤–µ—Ç–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if src_cat in overrides and src_sub in overrides[src_cat]:
                if moved_to_keep:
                    overrides[src_cat][src_sub] = moved_to_keep
                else:
                    del overrides[src_cat][src_sub]
                    if not overrides[src_cat]:
                        del overrides[src_cat]
    
        # 3) –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä—É—á–Ω—ã–µ: manual -> manual
        manual_list = manual.get(src_cat, {}).get(src_sub, [])
        manual_to_keep = []
        for it in manual_list:
            chosen = any(p["src"] == "manual" and p["desc"] == str(it.get("desc","")) and p["price"] == str(it.get("price","")) for p in picks)
            if chosen:
                manual.setdefault(new_cat, {}).setdefault(new_sub, []).append(it)
                moved_cnt += 1
            else:
                manual_to_keep.append(it)
        if manual_list is not None:
            if manual_to_keep:
                manual[src_cat][src_sub] = manual_to_keep
            else:
                if src_cat in manual and src_sub in manual[src_cat]:
                    del manual[src_cat][src_sub]
                    if not manual[src_cat]:
                        del manual[src_cat]
    
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        context.application.bot_data["catalog"] = auto_cat
        _save_catalog_to_disk(auto_cat)
        context.application.bot_data["moved_overrides"] = overrides
        _save_moved_overrides(overrides)
        context.application.bot_data["manual_categories"] = manual
        _save_manual_categories(manual)
    
        await query.edit_message_text(
            f"‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π: {moved_cnt}\n"
            f"–ò–∑: {src_cat}/{src_sub} ‚Üí –í: {new_cat}/{new_sub}"
        )
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –Ω–æ–≤—É—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        await show_admin_panel(query, context)
        return

    # --- –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—ã (—Ä—É—á–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã) ---
    if data == "adminpanel_edit_prices":
        user_id = query.from_user.id
        if not is_admin(user_id):
            await query.answer("–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", show_alert=True)
            return

        manual = context.application.bot_data.get("manual_categories")
        if manual is None:
            manual = _load_manual_categories()
            context.application.bot_data["manual_categories"] = manual

        buttons = []
        cb_map = {}
        idx = 0
        for cat, brands in manual.items():
            for brand in brands.keys():
                key = f"manualprice_select|{idx}"
                cb_map[key] = (cat, brand)
                buttons.append([InlineKeyboardButton(f"{cat} / {brand}", callback_data=key)])
                idx += 1

        if not buttons:
            await query.edit_message_text("–ù–µ—Ç –≤—Ä—É—á–Ω—É—é –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π (manual_categories.json).")
            return

        context.user_data["manualprice_select_map"] = cb_map
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω:",
            reply_markup=InlineKeyboardMarkup(buttons)
        )
        return
    
    if data.startswith("manualprice_select|"):
        cb_map = context.user_data.get("manualprice_select_map", {})
        if data not in cb_map:
            await query.edit_message_text("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        cat, brand = cb_map[data]
        context.user_data["manualprice_cat"] = cat
        context.user_data["manualprice_brand"] = brand
        context.user_data["manualprice_step"] = "awaiting_indices"

        manual = context.application.bot_data.get("manual_categories", {}) or _load_manual_categories()
        items = manual.get(cat, {}).get(brand, [])

        if not items:
            await query.edit_message_text(f"–í {cat} / {brand} —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç.")
            return

        # –ù—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        lines = ["<b>–¢–µ–∫—É—â–∏–µ —Ç–æ–≤–∞—Ä—ã:</b>"]
        for i, it in enumerate(items, start=1):
            d = html.escape(it.get("desc", ""))
            p = html.escape(str(it.get("price", "")))
            lines.append(f"{i}. {d} ‚Äî {p}")
        lines.append("")
        lines.append("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1-3,5):")

        await query.edit_message_text("\n".join(lines), parse_mode=ParseMode.HTML)
        return

    
    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ ---
    if data == "manualcat_add":
        context.user_data["manualcat_step"] = 1
        await query.edit_message_text(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n\n"
        "–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /start"
    )
        return
    
    if data == "manualcat_remove":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º mapping –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
        import urllib.parse
        manual_cats = context.application.bot_data.get("manual_categories")
        if manual_cats is None:
            manual_cats = _load_manual_categories()
            context.application.bot_data["manual_categories"] = manual_cats
        buttons = []
        cb_map = {}  # callback_data -> (cat, brand)
        idx = 0
        for cat, brands in manual_cats.items():
            for brand in brands:
                cb_data = f"manualcat_del|{idx}"
                cb_map[cb_data] = (cat, brand)
                btn_text = f"{cat} / {brand}"
                buttons.append([InlineKeyboardButton(btn_text, callback_data=cb_data)])
                idx += 1
        if not buttons:
            await query.edit_message_text("–ù–µ—Ç –≤—Ä—É—á–Ω—É—é –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º mapping –≤ user_data
        context.user_data["manualcat_del_map"] = cb_map
        markup = InlineKeyboardMarkup(buttons)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é/–±—Ä–µ–Ω–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
        return
    
    if data.startswith("manualcat_del|"):
        cb_map = context.user_data.get("manualcat_del_map", {})
        if data not in cb_map:
            await query.edit_message_text("–ö–∞—Ç–µ–≥–æ—Ä–∏—è/–±—Ä–µ–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        cat, brand = cb_map[data]

        # 1) –£–¥–∞–ª—è–µ–º —Ä—É—á–Ω—É—é –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ manual_categories
        manual_cats = context.application.bot_data.get("manual_categories")
        if manual_cats is None:
            manual_cats = _load_manual_categories()

        removed_manual_count = 0
        if cat in manual_cats and brand in manual_cats[cat]:
            removed_manual_count = len(manual_cats[cat][brand])
            del manual_cats[cat][brand]
            if not manual_cats[cat]:
                del manual_cats[cat]
            context.application.bot_data["manual_categories"] = manual_cats
            _save_manual_categories(manual_cats)

        # 2) –ï—Å–ª–∏ –≤ —ç—Ç–æ–π –∂–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ª–µ–∂–∞–ª–∏ –ü–ï–†–ï–ù–ï–°–Å–ù–ù–´–ï —Ç–æ–≤–∞—Ä—ã (moved_overrides) ‚Äî –≤–µ—Ä–Ω—ë–º –∏—Ö –≤ –∏—Å—Ö–æ–¥–Ω—ã–µ –º–µ—Å—Ç–∞
        overrides = context.application.bot_data.get("moved_overrides")
        if overrides is None:
            overrides = _load_moved_overrides()

        returned_count = 0
        if overrides.get(cat, {}).get(brand):
            moved_items = overrides[cat][brand]
            catalog = context.application.bot_data.get("catalog") or {}

            for it in moved_items:
                desc = it.get("desc", "")
                price = it.get("price", "")
                o_cat = it.get("orig_cat")
                o_sub = it.get("orig_sub")
                if not o_cat or not o_sub:
                    # –Ω–∞ —Å–ª—É—á–∞–π —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –±–µ–∑ orig_* ‚Äî –ø—Ä–æ–±—É–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
                    o_cat, o_sub = extract_category(desc)

                catalog.setdefault(o_cat, {}).setdefault(o_sub, []).append({"desc": desc, "price": price})
                returned_count += 1

            # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω–Ω—ã–µ –∏–∑ —ç—Ç–æ–π —Ä—É—á–Ω–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            del overrides[cat][brand]
            if not overrides[cat]:
                del overrides[cat]

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            context.application.bot_data["catalog"] = catalog
            _save_catalog_to_disk(catalog)
            context.application.bot_data["moved_overrides"] = overrides
            _save_moved_overrides(overrides)

        # 3) –û—Ç–≤–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        await query.edit_message_text(
            f"–£–¥–∞–ª–µ–Ω–æ: {cat} / {brand}\n"
            f"–í–æ–∑–≤—Ä–∞—â–µ–Ω–æ –≤ –∏—Å—Ö–æ–¥–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {returned_count} –ø–æ–∑."
        )
        context.user_data.pop("manualcat_del_map", None)
        await show_admin_panel(query, context)
        return
    
    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞–º–∏ ---
    if data == "admin_add":
        context.user_data["awaiting_admin_action"] = "add"
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:")
        return
    if data == "admin_remove":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        admins = _load_admins()
        buttons = []
        for admin_id in admins:
            try:
                user = await context.bot.get_chat(admin_id)
                username = f"@{user.username}" if getattr(user, "username", None) else ""
            except Exception:
                username = ""
            btn_text = f"{admin_id} {username}".strip()
            buttons.append([InlineKeyboardButton(btn_text, callback_data=f"admin_del|{admin_id}")])
        if not buttons:
            await query.edit_message_text("–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return
        markup = InlineKeyboardMarkup(buttons)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=markup)
        return
    if data.startswith("admin_del|"):
        # –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
        parts = data.split("|", 1)
        if len(parts) == 2:
            try:
                target_id = int(parts[1])
            except Exception:
                await query.edit_message_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id.")
                return
            admins = _load_admins()
            if target_id in admins:
                admins.remove(target_id)
                _save_admins(admins)
                await query.edit_message_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_id} —É–¥–∞–ª—ë–Ω –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
                await show_admin_panel(update, context)
            else:
                await query.edit_message_text("–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤.")
        return
    await query.answer()
    parts = data.split("|")
    if not parts:
        return
    
        # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä—É—á–Ω—É—é –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ ---
    if data.startswith("manualprod_select|"):
        cb_map = context.user_data.get("manualprod_select_map", {})
        if data not in cb_map:
            await query.edit_message_text("–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        cat, brand = cb_map[data]
        context.user_data["manualprod_cat"] = cat
        context.user_data["manualprod_brand"] = brand

        # –ë–µ—Ä—ë–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–æ–≤–∞—Ä—ã
        manual_cats = context.application.bot_data.get("manual_categories", {})
        items = manual_cats.get(cat, {}).get(brand, [])

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ
        if items:
            lines = ["<b>–¢–µ–∫—É—â–∏–µ —Ç–æ–≤–∞—Ä—ã:</b>"]
            for idx, it in enumerate(items, start=1):
                desc = html.escape(it.get("desc", ""))
                price = html.escape(str(it.get("price", "")))
                lines.append(f"{idx}. {desc} ‚Äî {price}")
            lines.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–∞–º–∏
        else:
            lines = ["<i>–¢–æ–≤–∞—Ä–æ–≤ –µ—â—ë –Ω–µ—Ç.</i>", ""]

        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        buttons = [
            [InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã", callback_data="manualprod_add")],
            [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä—ã", callback_data="manualprod_remove")],
        ]

        await query.edit_message_text(
            "\n".join(lines) +
            f"\n–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è <b>{cat} / {brand}</b>\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode="HTML"
        )
        return

    # --- –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ ---
    if data == "manualprod_add":
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∞–≥: –æ–∂–∏–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
        context.user_data["manualprod_step"] = 1
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏ —Ü–µ–Ω—É.\n–ö–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞: –û–ø–∏—Å–∞–Ω–∏–µ;–¶–µ–Ω–∞\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /start"
        )
        return

       # --- –ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–æ–∫ ---
    if data == "manualprod_remove":
        cat = context.user_data.get("manualprod_cat")
        brand = context.user_data.get("manualprod_brand")
        manual_cats = context.application.bot_data.get("manual_categories", {})
        items = manual_cats.get(cat, {}).get(brand, [])
        if not items:
            await query.edit_message_text("–¢–æ–≤–∞—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Ç.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        lines = []
        for idx, it in enumerate(items, start=1):
            desc = html.escape(it.get("desc", ""))
            price = html.escape(str(it.get("price", "")))
            lines.append(f"{idx}. {desc} ‚Äî {price}")
        text = "<b>–¢–æ–≤–∞—Ä—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>\n\n" + "\n".join(lines)
        await query.edit_message_text(
            text + "\n\n–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1-3,5):",
            parse_mode=ParseMode.HTML
        )

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É –ø–∞—Ä—Å–∏–Ω–≥–∞
        context.user_data["manualprod_step"] = "awaiting_manualprod_delete"
        return

    # --- –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ ---
    if data.startswith("manualprod_del|"):
        cb_map = context.user_data.get("manualprod_del_map", {})
        if data not in cb_map:
            await query.edit_message_text("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        idx = cb_map[data]
        cat = context.user_data.get("manualprod_cat")
        brand = context.user_data.get("manualprod_brand")
        manual_cats = context.application.bot_data.get("manual_categories", {})
        items = manual_cats.get(cat, {}).get(brand, [])
        if 0 <= idx < len(items):
            deleted = items.pop(idx)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            _save_manual_categories(manual_cats)
            context.application.bot_data["manual_categories"] = manual_cats
            await query.edit_message_text(f"–£–¥–∞–ª—ë–Ω —Ç–æ–≤–∞—Ä: {deleted.get('desc')} ‚Äî {deleted.get('price')}")
            await show_admin_panel(update, context)
        else:
            await query.edit_message_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å.")
        return


    full_catalog = get_full_catalog(context)
    if not full_catalog:
        await query.edit_message_text("–ö–∞—Ç–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∫–æ–º–∞–Ω–¥–æ–π /add_catalog.")
        return

    if parts[0] == "cat":  # –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        cat = parts[1]
        # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–π —Å—Ç–µ–∫: –ø—É—à–∏–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å
        nav_stack = context.user_data.get("navigation_stack", [])
        # –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –Ω–µ –∏–∑ back, –ø—É—à–∏–º
        if not nav_stack or nav_stack[-1] != ("cat", cat):
            nav_stack.append(("cat", cat))
        context.user_data["navigation_stack"] = nav_stack
        subcats = full_catalog.get(cat, {})
        # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–≤–∞—Ä–æ–≤
        buttons = []
        for sub_name, items in subcats.items():
            buttons.append([InlineKeyboardButton(text=f"{sub_name} ({len(items)})", callback_data=f"sub|{cat}|{sub_name}")])
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥: –µ—Å–ª–∏ —Å—Ç–µ–∫ –Ω–µ –ø—É—Å—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —É—Ä–æ–≤–Ω—é
        if len(nav_stack) > 1:
            buttons.append([InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="back")])
        else:
            buttons.append([InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="back|root")])
        markup = InlineKeyboardMarkup(buttons)
        await query.edit_message_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {cat}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)
        return

    elif parts[0] == "sub":  # –í—ã–±—Ä–∞–Ω–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è
        cat, sub = parts[1], parts[2]
        # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–π —Å—Ç–µ–∫: –ø—É—à–∏–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å
        nav_stack = context.user_data.get("navigation_stack", [])
        if not nav_stack or nav_stack[-1] != ("sub", cat, sub):
            nav_stack.append(("sub", cat, sub))
        context.user_data["navigation_stack"] = nav_stack
        items = full_catalog.get(cat, {}).get(sub, [])

        text_lines: list[str] = []
        for item in items:
            desc = html.escape(str(item['desc']))
            price = str(item['price']).strip()
            line = f"<b>{desc}</b>"
            if price:
                line += f" ‚Äî <i>{html.escape(price)} ‚ÇΩ</i>"
            text_lines.append(line)
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –º–µ–∂–¥—É —Ç–æ–≤–∞—Ä–∞–º–∏ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        lines_with_spacing = []
        for l in text_lines:
            lines_with_spacing.append(l)
            lines_with_spacing.append("")

        MAX_LENGTH = 4000
        chunks: list[str] = []
        current_lines: list[str] = []
        current_len = 0
        for line in lines_with_spacing:
            line_len = len(line) + 1
            if current_len + line_len > MAX_LENGTH and current_lines:
                chunks.append("\n".join(current_lines))
                current_lines = [line]
                current_len = line_len
            else:
                current_lines.append(line)
                current_len += line_len
        if current_lines:
            chunks.append("\n".join(current_lines))

        if not chunks:
            chunks = ["–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤."]

        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥: –µ—Å–ª–∏ —Å—Ç–µ–∫ –Ω–µ –ø—É—Å—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —É—Ä–æ–≤–Ω—é
        nav_stack = context.user_data.get("navigation_stack", [])
        if len(nav_stack) > 1:
            buttons = [[InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="back")]]
        else:
            buttons = [[InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="back|root")]]
        markup = InlineKeyboardMarkup(buttons)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —á–∞–Ω–∫–∏ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–∞–∫ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ
        # –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —á–∞–Ω–∫ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" —Å—Ä–∞–∑—É
        n = len(chunks)
        if n == 1:
            text_to_send = f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {cat} / {sub}\n\n{chunks[0]}"
            await query.edit_message_text(text_to_send, parse_mode="HTML", reply_markup=markup)
        else:
            for idx, chunk in enumerate(chunks):
                if idx == 0:
                    # –ü–µ—Ä–≤—ã–π —á–∞–Ω–∫ ‚Äî —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    text_to_send = f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {cat} / {sub}\n\n{chunk}"
                    await query.edit_message_text(text_to_send, parse_mode="HTML")
                elif idx < n - 1:
                    await context.bot.send_message(chat_id=update.effective_chat.id, text=chunk, parse_mode="HTML")
                else:
                    # –ü–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫ ‚Äî —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
                    await context.bot.send_message(chat_id=update.effective_chat.id, text=chunk, parse_mode="HTML", reply_markup=markup)
        return

    elif parts[0] == "back":
        # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–π —Å—Ç–µ–∫: pop —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å
        nav_stack = context.user_data.get("navigation_stack", [])
        if nav_stack:
            nav_stack.pop()
        context.user_data["navigation_stack"] = nav_stack

        # –ï—Å–ª–∏ —Å—Ç–µ–∫ –ø—É—Å—Ç –∏–ª–∏ —è–≤–Ω–æ back|root ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—Ä–µ–Ω—å –∫–∞—Ç–∞–ª–æ–≥–∞

        if (len(parts) > 1 and parts[1] == "root") or not nav_stack:
            buttons = []
            for cat_name in _sort_categories(list(full_catalog.keys())):
                subdict = full_catalog[cat_name]
                count = sum(len(items) for items in subdict.values())
                buttons.append([InlineKeyboardButton(text=f"{cat_name} ({count})", callback_data=f"cat|{cat_name}")])
            markup = InlineKeyboardMarkup(buttons)
            try:
                await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)
            except Exception as e:
                from telegram.error import BadRequest
                if isinstance(e, BadRequest):
                    await context.bot.send_message(chat_id=update.effective_chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)
                else:
                    raise
            return

        # –ò–Ω–∞—á–µ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å
        prev = nav_stack[-1] if nav_stack else None
        if prev:
            if prev[0] == "cat":
                cat = prev[1]
                subcats = full_catalog.get(cat, {})
                buttons = []
                for sub_name, items in subcats.items():
                    buttons.append([InlineKeyboardButton(text=f"{sub_name} ({len(items)})", callback_data=f"sub|{cat}|{sub_name}")])
                if len(nav_stack) > 1:
                    buttons.append([InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="back")])
                else:
                    buttons.append([InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="back|root")])
                markup = InlineKeyboardMarkup(buttons)
                await query.edit_message_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {cat}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)
            elif prev[0] == "sub":
                cat, sub = prev[1], prev[2]
                items = full_catalog.get(cat, {}).get(sub, [])
                text_lines: list[str] = []
                for item in items:
                    desc = html.escape(str(item['desc']))
                    price = str(item['price']).strip()
                    line = f"<b>{desc}</b>"
                    if price:
                        line += f" ‚Äî <i>{html.escape(price)} ‚ÇΩ</i>"
                    text_lines.append(line)
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –º–µ–∂–¥—É —Ç–æ–≤–∞—Ä–∞–º–∏ –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                lines_with_spacing = []
                for l in text_lines:
                    lines_with_spacing.append(l)
                    lines_with_spacing.append("")

                MAX_LENGTH = 4000
                chunks: list[str] = []
                current_lines: list[str] = []
                current_len = 0
                for line in lines_with_spacing:
                    line_len = len(line) + 1
                    if current_len + line_len > MAX_LENGTH and current_lines:
                        chunks.append("\n".join(current_lines))
                        current_lines = [line]
                        current_len = line_len
                    else:
                        current_lines.append(line)
                        current_len += line_len
                if current_lines:
                    chunks.append("\n".join(current_lines))
                if not chunks:
                    chunks = ["–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤."]
                if len(nav_stack) > 1:
                    buttons = [[InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="back")]]
                else:
                    buttons = [[InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="back|root")]]
                markup = InlineKeyboardMarkup(buttons)
                text_to_send = f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {cat} / {sub}\n\n{chunks[0]}"
                await query.edit_message_text(text_to_send, reply_markup=markup, parse_mode="HTML")
        return

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    if TOKEN == "YOUR_BOT_TOKEN_HERE":
        raise RuntimeError(
            "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–¥–∞—Ç—å —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞. "
            "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TOKEN –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ TG_BOT_TOKEN."
        )

    app = ApplicationBuilder().token(TOKEN).build()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ —Å –¥–∏—Å–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ bot_data
    initial_catalog = _load_catalog_from_disk()
    if initial_catalog:
        app.bot_data["catalog"] = initial_catalog

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Ä—É—á–Ω—É—é –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –¥–∏—Å–∫–∞
    app.bot_data["manual_categories"] = _load_manual_categories()
    app.bot_data["moved_overrides"] = _load_moved_overrides()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("add_catalog", add_catalog_command))
    app.add_handler(CommandHandler("edit_category", edit_category_command))
    app.add_handler(  CommandHandler("edit_products", edit_products_command) ) 
    app.add_handler(CommandHandler("edit_admins", edit_admins_command))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("about", about_command))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND) & (~filters.Document.ALL), handle_text))
    app.add_handler(CallbackQueryHandler(callback_query_handler))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –ø–æ–ª–ª–∏–Ω–≥
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl-C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    app.run_polling()


if __name__ == "__main__":
    main() 