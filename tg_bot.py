# tg_bot.py
import os
import tempfile
import json
import html
from pathlib import Path
from dotenv import load_dotenv
load_dotenv()

import pandas as pd
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)
import shutil

# ---------------------------------------------------------------------------
# –ó–∞–º–µ–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
# –æ–∫—Ä—É–∂–µ–Ω–∏—è TG_BOT_TOKEN, —á—Ç–æ–±—ã —Ç–æ–∫–µ–Ω –ø–æ–¥—Ç—è–Ω—É–ª—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
# ---------------------------------------------------------------------------
TOKEN: str | None = os.getenv("TG_BOT_TOKEN")
# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∞–π–ª—ã –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
ADMIN_USER_IDS: set[int] = {6413686861, 728567535, 510202114, 7548453140}

# –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
CATALOG_FILE = "catalog_data.json"
LATEST_EXCEL_FILE = "latest_catalog.xlsx"

# –ù–∞–∑–≤–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
BTN_CHOOSE_CATEGORY = "üìÇ –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
# –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É
BTN_CONTACT_MANAGER = "üí¨ –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"
BTN_SUBSCRIBE = "‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"
BTN_GET_EXCEL = "üì• –ü–æ–ª—É—á–∏—Ç—å Excel-—Ñ–∞–π–ª"
BTN_SEARCH_CATALOG = "üîç –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É"

# –î–æ–±–∞–≤–∏–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –∫–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏
CMD_HELP = "help"

# –°—Å—ã–ª–∫–∏ –¥–ª—è —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
MANAGER_TELEGRAM_LINK = "https://t.me/tanya_chilikova"
# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è WhatsApp chat link
MANAGER_WHATSAPP_LINK = "https://wa.me/79278783209"

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äì –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è, –≤—Ç–æ—Ä–∞—è ‚Äì –ø–æ–∏—Å–∫
MAIN_MENU_MARKUP = ReplyKeyboardMarkup(
    [
        [BTN_CHOOSE_CATEGORY, BTN_CONTACT_MANAGER],
        [BTN_SUBSCRIBE, BTN_GET_EXCEL],
        [BTN_SEARCH_CATALOG],
    ],
    resize_keyboard=True,
)


def _load_catalog_from_disk() -> dict | None:
    """–ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∏–∑ —Ñ–∞–π–ª–∞ JSON."""
    if os.path.exists(CATALOG_FILE):
        try:
            with open(CATALOG_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception:
            pass
    return None


def _save_catalog_to_disk(catalog: dict) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–∞–ª–æ–≥ –≤ —Ñ–∞–π–ª JSON."""
    try:
        with open(CATALOG_FILE, "w", encoding="utf-8") as f:
            json.dump(catalog, f, ensure_ascii=False, indent=2)
    except Exception:
        pass


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start: –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≤—ã–≤–æ–¥ –∫–∞—Ç–∞–ª–æ–≥–∞, –µ—Å–ª–∏ –æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω."""
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    greet_text = (
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ –Ω–∞—à–µ–º –∫–∞—Ç–∞–ª–æ–≥–µ. "
        "–í–æ—Ç —á—Ç–æ –º—ã –º–æ–∂–µ–º –≤–∞–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å"
    )
    await update.message.reply_text(greet_text, reply_markup=MAIN_MENU_MARKUP)

    # –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    catalog: dict | None = context.application.bot_data.get("catalog")
    if not catalog:
        # –ü—Ä–æ–±—É–µ–º –ø–æ–¥–≥—Ä—É–∑–∏—Ç—å —Å –¥–∏—Å–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏
        catalog = _load_catalog_from_disk()
        if catalog:
            context.application.bot_data["catalog"] = catalog
    if catalog:
        buttons = []
        for cat_name, subdict in catalog.items():
            count = sum(len(items) for items in subdict.values())
            buttons.append([InlineKeyboardButton(text=f"{cat_name} ({count})", callback_data=f"cat|{cat_name}")])
        markup = InlineKeyboardMarkup(buttons)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)
    else:
        await update.message.reply_text("–ö–∞—Ç–∞–ª–æ–≥ –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# -------------------------------------------------------------------
# –ü—Ä–∞–≤–∏–ª–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –±—Ä–µ–Ω–¥–æ–≤ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ)
# -------------------------------------------------------------------

# –ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç: (–ö–∞—Ç–µ–≥–æ—Ä–∏—è, [—Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ])
# –ü–æ—Ä—è–¥–æ–∫ ‚Äî —á–µ–º –≤—ã—à–µ, —Ç–µ–º –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç.
CATEGORY_KEYWORDS: list[tuple[str, list[str]]] = [
    # –û—Ç–¥–µ–ª—å–Ω—ã–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Üí –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤—ã—à–µ
    ("–¢–µ–ª–µ—Ñ–æ–Ω—ã –ø—Ä–æ—Ç–∏–≤–æ—É–¥–∞—Ä–Ω—ã–µ", [
        "blackview", "doogee", "oukitel", "unihertz", "rugged", "armor", "tank", "cyber", "mega"
    ]),
    ("–¢–µ–ª–µ—Ñ–æ–Ω—ã –∫–Ω–æ–ø–æ—á–Ω—ã–µ", ["nokia", "f+", "button phone", "feature phone"]),
    ("–ò–≥—Ä–æ–≤—ã–µ –∫–æ–Ω—Å–æ–ª–∏", ["playstation", "ps4", "ps5", "xbox", "switch", "steam deck", "–¥–∂–æ–π—Å—Ç–∏–∫", "–∏–≥—Ä–æ–≤–∞—è –∫–æ–Ω—Å–æ–ª—å"]),
    ("Go Pro", ["gopro", "hero"]),
    ("–ü—ã–ª–µ—Å–æ—Å—ã", ["–ø—ã–ª–µ—Å–æ—Å", "vacuum", "—Ä–æ–±–æ—Ç-–ø—ã–ª–µ—Å–æ—Å", "dyson", "dreame", "submarine"]),
    ("–ü–ª–∞–Ω—à–µ—Ç—ã", ["ipad", " galaxy tab", "tab ", "redmi pad", "poco pad", "tablet", "pad "]),
    ("–ù–æ—É—Ç–±—É–∫–∏", ["–Ω–æ—É—Ç–±—É–∫", "macbook", "magicbook", "matebook", "redmi book", "aspire", "ideapad", "ultrabook", "chromebook"]),
    ("–ö–æ–ª–æ–Ω–∫–∏", ["–∫–æ–ª–æ–Ω–∫–∞", "speaker", "jbl", "marshall", "sber", "—è–Ω–¥–µ–∫—Å", "boombox", "partybox", "stanmore", "woburn", "–º–∞–∫—Å"]),
    ("–ù–∞—É—à–Ω–∏–∫–∏", ["–Ω–∞—É—à–Ω–∏–∫", "–Ω–∞—É—à–Ω–∏–∫–∏", "airpods", "buds", "earphones", "earbuds", "sony wh-", "jbl tune", "marshall minor", "marshall major", "–≥–∞—Ä–Ω–∏—Ç—É—Ä–∞"]),
    ("–ß–∞—Å—ã", ["—á–∞—Å—ã", "watch", "smart band", "galaxy fit", "fitbit", "amazfit", "gtr", "gt3"]),
    ("–¢–µ–ª–µ—Ñ–æ–Ω—ã", [
        "iphone", "samsung", "x.mi", "x.poco", "x.redmi", "honor", "google pixel", "zte", "realme",
        "oneplus", "asus zenfone", "—Å–º–∞—Ä—Ç—Ñ–æ–Ω", "smartphone", "galaxy"
    ]),
    ("–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã", [
        "—Å–∑—É", "—Å–µ—Ç–µ–≤–æ–µ –∑–∞—Ä—è–¥–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", "–∫–∞–±–µ–ª—å", "–ø–µ—Ä–µ—Ö–æ–¥–Ω–∏–∫", "pencil", "keyboard", "mouse",
        "adapter", "magsafe", "–±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–∞—è –∑–∞—Ä—è–¥–∫–∞", "powerbank", "power bank", "—á–µ—Ö–æ–ª", "case", "cover"
    ]),
]

# –ë—Ä–µ–Ω–¥—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–∞–∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º)
BRAND_KEYWORDS: dict[str, str] = {
    # –°–º–∞—Ä—Ç—Ñ–æ–Ω—ã –∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞
    "apple": "Apple",
    "iphone": "Apple",
    "samsung": "Samsung",
    "galaxy": "Samsung",
    "xiaomi": "Xiaomi",
    "redmi": "Xiaomi",
    "poco": "Xiaomi",
    "mi ": "Xiaomi",
    "honor": "HONOR",
    "huawei": "Huawei",
    "google": "Google",
    "pixel": "Google",
    "zte": "ZTE",
    "realme": "Realme",
    "oneplus": "OnePlus",
    "asus": "ASUS",
    "zenfone": "ASUS",
    "lenovo": "Lenovo",
    "acer": "Acer",
    "gigabyte": "Gigabyte",
    "machenike": "Machenike",
    # –ù–∞—É—à–Ω–∏–∫–∏ –∏ –∑–≤—É–∫
    "jbl": "JBL",
    "marshall": "Marshall",
    "sony": "SONY",
    "sber": "Sber",
    "—è–Ω–¥–µ–∫—Å": "–Ø–Ω–¥–µ–∫—Å",
    # –ü—ã–ª–µ—Å–æ—Å—ã –∏ —Ç–µ—Ö–Ω–∏–∫–∞
    "dyson": "Dyson",
    "dreame": "Dreame",
    # –¢–µ–ª–µ—Ñ–æ–Ω—ã –∫–Ω–æ–ø–æ—á–Ω—ã–µ / –ø—Ä–æ—Ç–∏–≤–æ—É–¥–∞—Ä–Ω—ã–µ
    "nokia": "Nokia",
    "f+": "F+",
    "blackview": "Blackview",
    "doogee": "DOOGEE",
    "oukitel": "OUKITEL",
    "unihertz": "Unihertz",
    # –ü—Ä–æ—á–µ–µ
    "gopro": "GoPro",
    "garmin": "Garmin",
    "fitbit": "Fitbit",
}


async def add_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /add ‚Äî –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π Excel-—Ñ–∞–π–ª —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)."""
    user_id = update.effective_user.id if update.effective_user else None
    if user_id not in ADMIN_USER_IDS:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –∂–¥—ë–º —Ñ–∞–π–ª –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    context.user_data["awaiting_file"] = True
    await update.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel-—Ñ–∞–π–ª (.xlsx) —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–π –±–∞–∑–æ–π —Ç–æ–≤–∞—Ä–æ–≤."
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /help ‚Äî –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º."""
    link_btn_tg = InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É –≤ –¢–µ–ª–µ–≥—Ä–∞–º", url=MANAGER_TELEGRAM_LINK)
    link_btn_wa = InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É –≤ WhatsApp", url=MANAGER_WHATSAPP_LINK)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏ —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º:",
        reply_markup=InlineKeyboardMarkup([[link_btn_tg], [link_btn_wa]]),
    )


def extract_category(description: str) -> tuple[str, str]:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ–º (category, subcategory) –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞."""
    desc_low = description.lower()

    # 1. –ö–∞—Ç–µ–≥–æ—Ä–∏—è (–ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ)
    category = "–î—Ä—É–≥–æ–µ"
    for cat, keywords in CATEGORY_KEYWORDS:
        if any(kw in desc_low for kw in keywords):
            category = cat
            break

    # 2. –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å –±—Ä–µ–Ω–¥ ‚Äî —Å–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ
    subcategory = "–û–±—â–µ–µ"
    first_word = description.split()[0].strip(',.;:"()').lower() if description else ""
    if first_word and first_word in BRAND_KEYWORDS:
        subcategory = BRAND_KEYWORDS[first_word]
    else:
        for kw, brand in BRAND_KEYWORDS.items():
            if kw in desc_low:
                subcategory = brand
                break

    # –û—Å–æ–±–æ–µ –ø—Ä–∞–≤–∏–ª–æ: –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ Go Pro –≤—Å–µ–≥–¥–∞ –±—Ä–µ–Ω–¥ GoPro
    if category == "Go Pro":
        subcategory = "GoPro"

    return category, subcategory


async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ .xlsx, —Å–∫–∞—á–∏–≤–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º."""
    user_id = update.effective_user.id if update.effective_user else None
    awaiting_file = context.user_data.get("awaiting_file")

    # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /add
    if user_id not in ADMIN_USER_IDS or not awaiting_file:
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å –±–æ—Ç –Ω–µ –æ–∂–∏–¥–∞–µ—Ç —Ñ–∞–π–ª –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∑–∞–≥—Ä—É–∑–∫–∏."
        )
        return

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    context.user_data["awaiting_file"] = False

    document = update.message.document
    if not document:
        return

    if not document.file_name.lower().endswith(".xlsx"):
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlsx. –î—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è."
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    tmp_dir = Path(tempfile.mkdtemp())
    src_path = tmp_dir / document.file_name
    file_obj = await document.get_file()
    await file_obj.download_to_drive(str(src_path))

    try:
        # –ß–∏—Ç–∞–µ–º Excel
        df = pd.read_excel(src_path)
    except Exception as exc:
        await update.message.reply_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –∫–∞–∫ Excel: " f"{exc}"
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥–ª–∏ —Å–∫–∞—á–∏–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é
    try:
        shutil.copy(src_path, LATEST_EXCEL_FILE)
    except Exception:
        pass

    # –°—Ç—Ä–æ–∏–º –∫–∞—Ç–∞–ª–æ–≥ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
    catalog: dict[str, dict[str, list[dict[str, str]]]] = {}
    for _, row in df.iterrows():
        desc = str(row.get("description") or row.get("desription") or "")
        price = row.get("price") or row.get("–¶–µ–Ω–∞") or row.get("Price") or ""
        cat, sub = extract_category(desc)
        catalog.setdefault(cat, {}).setdefault(sub, []).append({"desc": desc, "price": price})

    if not catalog:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–∞–ª–æ–≥ –≤ bot_data (–æ–±—â–∏–π –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    context.application.bot_data["catalog"] = catalog
    # –ê —Ç–∞–∫–∂–µ –Ω–∞ –¥–∏—Å–∫, —á—Ç–æ–±—ã –∫–∞—Ç–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω—è–ª—Å—è –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏ –±–æ—Ç–∞
    _save_catalog_to_disk(catalog)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–≤–∞—Ä–æ–≤
    buttons = []
    for cat, subdict in catalog.items():
        count = sum(len(items) for items in subdict.values())
        buttons.append([InlineKeyboardButton(text=f"{cat} ({count})", callback_data=f"cat|{cat}")])
    markup = InlineKeyboardMarkup(buttons)
    await update.message.reply_text("–ö–∞—Ç–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∂–µ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    try:
        os.remove(src_path)
        os.rmdir(tmp_dir)
    except OSError:
        pass


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é."""
    text = update.message.text

    # --- 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∂–∏–º–∞ –ø–æ–∏—Å–∫–∞ ---
    if context.user_data.get("awaiting_search"):
        # –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
        context.user_data["awaiting_search"] = False

        query = (text or "").strip()
        if not query:
            await update.message.reply_text("–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return

        catalog: dict | None = context.application.bot_data.get("catalog")
        if not catalog:
            await update.message.reply_text("–ö–∞—Ç–∞–ª–æ–≥ –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        query_low = query.lower()
        results: list[tuple[str, str, dict]] = []  # (cat, sub, item)
        for cat, subdict in catalog.items():
            for sub, items in subdict.items():
                for item in items:
                    if query_low in str(item["desc"]).lower():
                        results.append((cat, sub, item))

        if not results:
            await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        lines: list[str] = []
        for cat, sub, item in results:
            desc = html.escape(str(item["desc"]))
            price = str(item["price"]).strip()
            line = f"<b>{desc}</b>"
            if price:
                line += f" ‚Äî <i>{html.escape(price)} ‚ÇΩ</i>"
            line += f"\n<i>{cat} / {sub}</i>"
            lines.append(line)

        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (–ª–∏–º–∏—Ç 4096 —Å–∏–º–≤–æ–ª–æ–≤)
        MAX_LENGTH = 4000
        chunks: list[str] = []
        current: list[str] = []
        cur_len = 0
        for line in lines:
            ln = len(line) + 1
            if cur_len + ln > MAX_LENGTH and current:
                chunks.append("\n\n".join(current))
                current = [line]
                cur_len = ln
            else:
                current.append(line)
                cur_len += ln
        if current:
            chunks.append("\n\n".join(current))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –∫—É—Å–∫–∏ (–ø–µ—Ä–≤—ã–π ‚Äì —Å –º–µ–Ω—é, –æ—Å—Ç–∞–ª—å–Ω—ã–µ ‚Äì –±–µ–∑)
        for idx, chunk in enumerate(chunks):
            await update.message.reply_text(chunk, parse_mode="HTML" if chunk else None,
                                            reply_markup=MAIN_MENU_MARKUP if idx == len(chunks)-1 else None)
        return

    # --- 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ ---
    if text == BTN_SEARCH_CATALOG:
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        context.user_data["awaiting_search"] = True
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É:")
        return
    if text == BTN_CHOOSE_CATEGORY:
        catalog: dict | None = context.application.bot_data.get("catalog")
        if catalog:
            buttons = []
            for cat_name, subdict in catalog.items():
                count = sum(len(items) for items in subdict.values())
                buttons.append([InlineKeyboardButton(text=f"{cat_name} ({count})", callback_data=f"cat|{cat_name}")])
            markup = InlineKeyboardMarkup(buttons)
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)
        else:
            await update.message.reply_text("–ö–∞—Ç–∞–ª–æ–≥ –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    elif text == BTN_CONTACT_MANAGER:
        # –ö–Ω–æ–ø–∫–∏ —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        link_btn_tg = InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É –≤ –¢–µ–ª–µ–≥—Ä–∞–º", url=MANAGER_TELEGRAM_LINK)
        link_btn_wa = InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É –≤ WhatsApp", url=MANAGER_WHATSAPP_LINK)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏ —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º:",
            reply_markup=InlineKeyboardMarkup([[link_btn_tg], [link_btn_wa]]),
        )
    elif text == BTN_GET_EXCEL:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é Excel-–≤–µ—Ä—Å–∏—é –∫–∞—Ç–∞–ª–æ–≥–∞
        if os.path.exists(LATEST_EXCEL_FILE):
            try:
                await update.message.reply_document(document=open(LATEST_EXCEL_FILE, "rb"), filename="catalog.xlsx")
            except Exception as exc:
                await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª: {exc}")
        else:
            await update.message.reply_text("–§–∞–π–ª –∫–∞—Ç–∞–ª–æ–≥–∞ –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.")

    elif text == BTN_SUBSCRIBE:
        subs: set[int] = context.application.bot_data.setdefault("subscribers", set())
        user_id = update.effective_user.id if update.effective_user else None
        if user_id:
            subs.add(user_id)
            await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.")
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.")


async def callback_query_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    data = query.data or ""
    parts = data.split("|")
    if not parts:
        return

    catalog = context.application.bot_data.get("catalog")
    if not catalog:
        await query.edit_message_text("–ö–∞—Ç–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∫–æ–º–∞–Ω–¥–æ–π /add.")
        return

    if parts[0] == "cat":  # –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        cat = parts[1]
        subcats = catalog.get(cat, {})
        # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–≤–∞—Ä–æ–≤
        buttons = []
        for sub_name, items in subcats.items():
            buttons.append([InlineKeyboardButton(text=f"{sub_name} ({len(items)})", callback_data=f"sub|{cat}|{sub_name}")])
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (—ç—Ç–æ –∫–æ—Ä–µ–Ω—å)
        buttons.append([InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="back|root")])
        markup = InlineKeyboardMarkup(buttons)
        await query.edit_message_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {cat}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)

    elif parts[0] == "sub":  # –í—ã–±—Ä–∞–Ω–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è
        cat, sub = parts[1], parts[2]
        items = catalog.get(cat, {}).get(sub, [])
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ (–±–µ–∑ –Ω—É–º–µ—Ä–∞—Ü–∏–∏, —Å —Å–∏–º–≤–æ–ª–æ–º ‚ÇΩ)
        text_lines: list[str] = []
        for item in items:
            desc = html.escape(str(item['desc']))
            price = str(item['price']).strip()
            line = f"<b>{desc}</b>"
            if price:
                line += f" ‚Äî <i>{html.escape(price)} ‚ÇΩ</i>"
            text_lines.append(line)

        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç Telegram
        MAX_LENGTH = 4000  # —Å –∑–∞–ø–∞—Å–æ–º –º–µ–Ω—å—à–µ 4096
        chunks: list[str] = []
        current_lines: list[str] = []
        current_len = 0
        for line in text_lines:
            line_len = len(line) + 1  # +1 –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç—Ä–æ–∫–∏
            if current_len + line_len > MAX_LENGTH and current_lines:
                chunks.append("\n".join(current_lines))
                current_lines = [line]
                current_len = line_len
            else:
                current_lines.append(line)
                current_len += line_len
        if current_lines:
            chunks.append("\n".join(current_lines))

        if not chunks:
            chunks = ["–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤."]

        buttons = [[InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data=f"cat|{cat}")]]
        markup = InlineKeyboardMarkup(buttons)

        chat_id = update.effective_chat.id

        if len(chunks) == 1:
            # –°–æ–æ–±—â–µ–Ω–∏–µ —É–º–µ—â–∞–µ—Ç—Å—è –≤ –æ–¥–∏–Ω –∫—É—Å–æ–∫ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∫–Ω–æ–ø–∫–æ–π
            text_to_send = f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {cat} / {sub}\n\n{chunks[0]}"
            await query.edit_message_text(text_to_send, reply_markup=markup, parse_mode="HTML")
        else:
            # –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫—É—Å–∫–∏: –ø–µ—Ä–≤—ã–π ‚Äî –±–µ–∑ –∫–Ω–æ–ø–∫–∏, –ø–æ—Å–ª–µ–¥–Ω–∏–π ‚Äî —Å –∫–Ω–æ–ø–∫–æ–π
            first_text = f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {cat} / {sub}\n\n{chunks[0]}"
            await query.edit_message_text(first_text, reply_markup=None, parse_mode="HTML")

            # –°—Ä–µ–¥–Ω–∏–µ –∫—É—Å–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å) –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ –∫–Ω–æ–ø–æ–∫
            for chunk in chunks[1:-1]:
                await context.bot.send_message(chat_id=chat_id, text=chunk, parse_mode="HTML")

            # –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫—É—Å–æ–∫ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
            await context.bot.send_message(chat_id=chat_id, text=chunks[-1], reply_markup=markup, parse_mode="HTML")

    elif parts[0] == "back":
        # –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        buttons = []
        for cat_name, subdict in catalog.items():
            count = sum(len(items) for items in subdict.values())
            buttons.append([InlineKeyboardButton(text=f"{cat_name} ({count})", callback_data=f"cat|{cat_name}")])
        markup = InlineKeyboardMarkup(buttons)
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    if TOKEN == "YOUR_BOT_TOKEN_HERE":
        raise RuntimeError(
            "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–¥–∞—Ç—å —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞. "
            "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TOKEN –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ TG_BOT_TOKEN."
        )

    app = ApplicationBuilder().token(TOKEN).build()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ —Å –¥–∏—Å–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ bot_data
    initial_catalog = _load_catalog_from_disk()
    if initial_catalog:
        app.bot_data["catalog"] = initial_catalog

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("add", add_command))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND) & (~filters.Document.ALL), handle_text))
    app.add_handler(CallbackQueryHandler(callback_query_handler))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –ø–æ–ª–ª–∏–Ω–≥
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl-C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    app.run_polling()


if __name__ == "__main__":
    main() 