async def delete_all_user_messages(context, chat_id):
    msg_ids = context.user_data.pop("all_msg_ids", [])
    for msg_id in msg_ids:
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=msg_id)
        except Exception:
            pass

# tg_bot.py
import os
import tempfile
import json
import html
from pathlib import Path
from dotenv import load_dotenv
load_dotenv()

import pandas as pd
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)
import shutil

# ---------------------------------------------------------------------------
# –ó–∞–º–µ–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
# –æ–∫—Ä—É–∂–µ–Ω–∏—è TG_BOT_TOKEN, —á—Ç–æ–±—ã —Ç–æ–∫–µ–Ω –ø–æ–¥—Ç—è–Ω—É–ª—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
# ---------------------------------------------------------------------------
TOKEN: str | None = os.getenv("TG_BOT_TOKEN")
# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–º —Ä–∞–∑—Ä–µ—à–µ–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∞–π–ª—ã –∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
ADMIN_USER_IDS: set[int] = {6413686861, 728567535, 510202114, 7548453140}

# –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
CATALOG_FILE = "catalog_data.json"
LATEST_EXCEL_FILE = "latest_catalog.xlsx"

# –ù–∞–∑–≤–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
BTN_CHOOSE_CATEGORY = "üóÇÔ∏è –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
# –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É
BTN_CONTACT_MANAGER = "üí¨ –ó–∞–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞"
BTN_SUBSCRIBE = "‚úÖ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"
BTN_GET_EXCEL = "üíæ –ü–æ–ª—É—á–∏—Ç—å Excel-—Ñ–∞–π–ª"
BTN_SEARCH_CATALOG = "üîç –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É"

# –î–æ–±–∞–≤–∏–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –∫–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏
CMD_HELP = "help"

# –°—Å—ã–ª–∫–∏ –¥–ª—è —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
MANAGER_TELEGRAM_LINK = "https://t.me/tanya_chilikova"
# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è WhatsApp chat link
MANAGER_WHATSAPP_LINK = "https://wa.me/79278783209"

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äì –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è, –≤—Ç–æ—Ä–∞—è ‚Äì –ø–æ–∏—Å–∫
MAIN_MENU_MARKUP = ReplyKeyboardMarkup(
    [
        [BTN_CHOOSE_CATEGORY, BTN_CONTACT_MANAGER],
        [BTN_SUBSCRIBE, BTN_GET_EXCEL],
        [BTN_SEARCH_CATALOG],
    ],
    resize_keyboard=True,
)

# –ü–æ—Ä—è–¥–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–µ–Ω—é
PREFERRED_CATEGORY_ORDER: list[str] = [
    "–¢–µ–ª–µ—Ñ–æ–Ω—ã",
    "–ü–ª–∞–Ω—à–µ—Ç—ã",
    "–ù–æ—É—Ç–±—É–∫–∏",
]


def _sort_categories(cat_names: list[str]) -> list[str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –∂–µ–ª–∞–µ–º–æ–º –ø–æ—Ä—è–¥–∫–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.

    1. –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ PREFERRED_CATEGORY_ORDER ‚Äì –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
    2. –û—Å—Ç–∞–ª—å–Ω—ã–µ (–∫—Ä–æ–º–µ "–î—Ä—É–≥–æ–µ") ‚Äì –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É.
    3. "–î—Ä—É–≥–æ–µ" ‚Äì –ø–æ—Å–ª–µ–¥–Ω–µ–π, –µ—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç.
    """
    order_map = {name: idx for idx, name in enumerate(PREFERRED_CATEGORY_ORDER)}

    preferred = [c for c in PREFERRED_CATEGORY_ORDER if c in cat_names]
    other = sorted([c for c in cat_names if c not in order_map and c != "–î—Ä—É–≥–æ–µ"])
    tail = ["–î—Ä—É–≥–æ–µ"] if "–î—Ä—É–≥–æ–µ" in cat_names else []
    return preferred + other + tail


def _load_catalog_from_disk() -> dict | None:
    """–ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –∏–∑ —Ñ–∞–π–ª–∞ JSON."""
    if os.path.exists(CATALOG_FILE):
        try:
            with open(CATALOG_FILE, "r", encoding="utf-8") as f:
                return json.load(f)
        except Exception:
            pass
    return None


def _save_catalog_to_disk(catalog: dict) -> None:
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–∞–ª–æ–≥ –≤ —Ñ–∞–π–ª JSON."""
    try:
        with open(CATALOG_FILE, "w", encoding="utf-8") as f:
            json.dump(catalog, f, ensure_ascii=False, indent=2)
    except Exception:
        pass


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start: –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≤—ã–≤–æ–¥ –∫–∞—Ç–∞–ª–æ–≥–∞, –µ—Å–ª–∏ –æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω."""
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    greet_text = (
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ –Ω–∞—à–µ–º –∫–∞—Ç–∞–ª–æ–≥–µ. "
        "–í–æ—Ç —á—Ç–æ –º—ã –º–æ–∂–µ–º –≤–∞–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å"
    )
    chat_id = update.effective_chat.id
    await delete_all_user_messages(context, chat_id)
    m = await context.bot.send_message(chat_id=chat_id, text=greet_text, reply_markup=MAIN_MENU_MARKUP)
    context.user_data["all_msg_ids"] = [m.message_id]
    # –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    catalog: dict | None = context.application.bot_data.get("catalog")
    if not catalog:
        catalog = _load_catalog_from_disk()
        if catalog:
            context.application.bot_data["catalog"] = catalog
    if catalog:
        buttons = []
        for cat_name in _sort_categories(list(catalog.keys())):
            subdict = catalog[cat_name]
            count = sum(len(items) for items in subdict.values())
            buttons.append([InlineKeyboardButton(text=f"{cat_name} ({count})", callback_data=f"cat|{cat_name}")])
        markup = InlineKeyboardMarkup(buttons)
        m2 = await context.bot.send_message(chat_id=chat_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)
        context.user_data["all_msg_ids"] = [m.message_id, m2.message_id]
    else:
        m2 = await context.bot.send_message(chat_id=chat_id, text="–ö–∞—Ç–∞–ª–æ–≥ –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=MAIN_MENU_MARKUP)
        context.user_data["all_msg_ids"] = [m.message_id, m2.message_id]


# -------------------------------------------------------------------
# –ü—Ä–∞–≤–∏–ª–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –±—Ä–µ–Ω–¥–æ–≤ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ)
# -------------------------------------------------------------------

# –ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç: (–ö–∞—Ç–µ–≥–æ—Ä–∏—è, [—Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ])
# –ü–æ—Ä—è–¥–æ–∫ ‚Äî —á–µ–º –≤—ã—à–µ, —Ç–µ–º –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç.
CATEGORY_KEYWORDS: list[tuple[str, list[str]]] = [
    # –û—Ç–¥–µ–ª—å–Ω—ã–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Üí –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤—ã—à–µ
    ("–¢–µ–ª–µ—Ñ–æ–Ω—ã –ø—Ä–æ—Ç–∏–≤–æ—É–¥–∞—Ä–Ω—ã–µ", [
        "blackview", "doogee", "oukitel", "unihertz", "rugged", "armor", "tank", "cyber", "mega"
    ]),
    ("–¢–µ–ª–µ—Ñ–æ–Ω—ã –∫–Ω–æ–ø–æ—á–Ω—ã–µ", ["nokia", "f+", "button phone", "feature phone"]),
    ("–ò–≥—Ä–æ–≤—ã–µ –∫–æ–Ω—Å–æ–ª–∏", [
        "playstation", "ps4", "ps5", "xbox", "switch", "steam deck",
        "–¥–∂–æ–π—Å—Ç–∏–∫", "–∏–≥—Ä–æ–≤–∞—è –∫–æ–Ω—Å–æ–ª—å", "–∏–≥—Ä–æ–≤–∞—è –ø—Ä–∏—Å—Ç–∞–≤–∫–∞",
        # VR-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        "oculus", "quest", "vr", "vr headset", "vr —à–ª–µ–º", "meta quest"
    ]),
    (
        "–≠–∫—à–µ–Ω-–∫–∞–º–µ—Ä—ã",
        [
            # GoPro
            "gopro", "go pro", "hero", "gopro hero", "gopro hero 10", "gopro hero 11", "gopro hero 12",
            "gopro hero 13", "gopro hero 14", "gopro hero 15", "gopro hero 16", "gopro hero 17", "gopro hero 18", "gopro hero 19", "gopro hero 20",
            # DJI Osmo Action
            "dji", "osmo action", "action 5", "action5", "osmo action 5", "osmoaction",
            # Insta360
            "insta", "insta360", "insta 360"
        ],
    ),
    # –ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: –§–µ–Ω-—Å—Ç–∞–π–ª–µ—Ä (—Ñ–µ–Ω—ã, —Å—Ç–∞–π–ª–µ—Ä—ã –¥–ª—è –≤–æ–ª–æ—Å)
    (
        "–§–µ–Ω-—Å—Ç–∞–π–ª–µ—Ä",
        [
            "—Ñ–µ–Ω",
            "—Å—Ç–∞–π–ª–µ—Ä",
            "—Ñ–µ–Ω-—Å—Ç–∞–π–ª–µ—Ä",
            "hair dryer",
            "styler",
            "airwrap",
            "supersonic",
            "hd08",
            "hd-08",
            "hd16",
            "hd-16",
            "hs08",
            "hs-08",
            "ht01",
            "ht-01",
        ],
    ),
    ("–ü—ã–ª–µ—Å–æ—Å—ã", ["–ø—ã–ª–µ—Å–æ—Å", "vacuum", "—Ä–æ–±–æ—Ç-–ø—ã–ª–µ—Å–æ—Å", "dyson", "dreame", "submarine"]),
    ("–ü–ª–∞–Ω—à–µ—Ç—ã", ["ipad", " galaxy tab", "tab ", "redmi pad", "poco pad", "tablet", "pad "]),
    ("–ù–æ—É—Ç–±—É–∫–∏", ["–Ω–æ—É—Ç–±—É–∫", "macbook", "magicbook", "matebook", "redmi book", "aspire", "ideapad", "ultrabook", "chromebook"]),
    ("–ö–æ–ª–æ–Ω–∫–∏", ["–∫–æ–ª–æ–Ω–∫–∞", "speaker", "jbl", "marshall", "sber", "—è–Ω–¥–µ–∫—Å", "boombox", "partybox", "stanmore", "woburn", "–º–∞–∫—Å"]),
    ("–ù–∞—É—à–Ω–∏–∫–∏", ["–Ω–∞—É—à–Ω–∏–∫", "–Ω–∞—É—à–Ω–∏–∫–∏", "airpods", "buds", "earphones", "earbuds", "sony wh-", "jbl tune", "marshall minor", "marshall major", "–≥–∞—Ä–Ω–∏—Ç—É—Ä–∞"]),
    ("–ß–∞—Å—ã", ["—á–∞—Å—ã", "watch", "smart band", "galaxy fit", "fitbit", "amazfit", "gtr", "gt3"]),
    ("–¢–µ–ª–µ—Ñ–æ–Ω—ã", [
        "iphone", "samsung", "x.mi", "x.poco", "x.redmi", "honor", "google pixel", "zte", "realme",
        "oneplus", "asus zenfone", "—Å–º–∞—Ä—Ç—Ñ–æ–Ω", "smartphone", "galaxy"
    ]),
    ("–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã", [
        "—Å–∑—É", "—Å–µ—Ç–µ–≤–æ–µ –∑–∞—Ä—è–¥–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", "–∫–∞–±–µ–ª—å", "–ø–µ—Ä–µ—Ö–æ–¥–Ω–∏–∫", "pencil", "keyboard", "mouse",
        "adapter", "magsafe", "–±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–∞—è –∑–∞—Ä—è–¥–∫–∞", "powerbank", "power bank", "—á–µ—Ö–æ–ª", "case", "cover"
    ]),
]

# –ë—Ä–µ–Ω–¥—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∫–∞–∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º)
BRAND_KEYWORDS: dict[str, str] = {
    # –°–º–∞—Ä—Ç—Ñ–æ–Ω—ã –∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞
    "apple": "Apple",
    "iphone": "Apple",
    "samsung": "Samsung",
    "galaxy": "Samsung",
    "xiaomi": "Xiaomi",
    "redmi": "Xiaomi",
    "poco": "Xiaomi",
    "mi ": "Xiaomi",
    "honor": "HONOR",
    "huawei": "Huawei",
    "google": "Google",
    "pixel": "Google",
    "zte": "ZTE",
    "realme": "Realme",
    "oneplus": "OnePlus",
    "asus": "ASUS",
    "zenfone": "ASUS",
    "lenovo": "Lenovo",
    "acer": "Acer",
    "gigabyte": "Gigabyte",
    "machenike": "Machenike",
    # –ù–∞—É—à–Ω–∏–∫–∏ –∏ –∑–≤—É–∫
    "jbl": "JBL",
    "marshall": "Marshall",
    "sony": "SONY",
    "sber": "Sber",
    "—è–Ω–¥–µ–∫—Å": "–Ø–Ω–¥–µ–∫—Å",
    # –ü—ã–ª–µ—Å–æ—Å—ã –∏ —Ç–µ—Ö–Ω–∏–∫–∞
    "dyson": "Dyson",
    "dreame": "Dreame",
    # –¢–µ–ª–µ—Ñ–æ–Ω—ã –∫–Ω–æ–ø–æ—á–Ω—ã–µ / –ø—Ä–æ—Ç–∏–≤–æ—É–¥–∞—Ä–Ω—ã–µ
    "nokia": "Nokia",
    "f+": "F+",
    "blackview": "Blackview",
    "doogee": "DOOGEE",
    "oukitel": "OUKITEL",
    "unihertz": "Unihertz",
    # –ü—Ä–æ—á–µ–µ
    "gopro": "GoPro",
    "garmin": "Garmin",
    "fitbit": "Fitbit",
    # –≠–∫—à–µ–Ω-–∫–∞–º–µ—Ä—ã
    "dji": "DJI",
    "osmo": "DJI",
    "insta": "Insta360",
    "insta360": "Insta360",
    # VR / –ò–≥—Ä–æ–≤—ã–µ –∫–æ–Ω—Å–æ–ª–∏
    "oculus": "Oculus",
    "quest": "Oculus",
}


async def add_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /add ‚Äî –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π Excel-—Ñ–∞–π–ª —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω)."""
    user_id = update.effective_user.id if update.effective_user else None
    if user_id not in ADMIN_USER_IDS:
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –∂–¥—ë–º —Ñ–∞–π–ª –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    context.user_data["awaiting_file"] = True
    await update.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ Excel-—Ñ–∞–π–ª (.xlsx) —Å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–π –±–∞–∑–æ–π —Ç–æ–≤–∞—Ä–æ–≤."
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /help ‚Äî –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º."""
    link_btn_tg = InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É –≤ –¢–µ–ª–µ–≥—Ä–∞–º", url=MANAGER_TELEGRAM_LINK)
    link_btn_wa = InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É –≤ WhatsApp", url=MANAGER_WHATSAPP_LINK)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏ —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º:",
        reply_markup=InlineKeyboardMarkup([[link_btn_tg], [link_btn_wa]]),
    )


import re

def extract_category(description: str) -> tuple[str, str]:
    """
    –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é —Å —É—á–µ—Ç–æ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤, –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏ –≥–∏–±–∫–∏—Ö –ø—Ä–∞–≤–∏–ª.
    """
    desc = description or ""
    desc_low = desc.lower()
    category = "–î—Ä—É–≥–æ–µ"
    subcategory = "–û–±—â–µ–µ"


    # --- 1. –ù–∞—É—à–Ω–∏–∫–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —è–≤–Ω–æ–µ —Å–ª–æ–≤–æ, AirPods, EarPods, Buds, Earphones, Earbuds, –≥–∞—Ä–Ω–∏—Ç—É—Ä–∞, –¥–∞–∂–µ –µ—Å–ª–∏ –µ—Å—Ç—å type-c, usb-c –∏ —Ç.–¥.) ---
    headphones_pattern = r"\b(–Ω–∞—É—à–Ω–∏–∫|–Ω–∞—É—à–Ω–∏–∫–∏|airpods|air pods|air pod|earpods|ear pods|ear pod|earphones|earphone|earbuds|earbud|buds|–≥–∞—Ä–Ω–∏—Ç—É—Ä–∞)\b"
    if re.search(headphones_pattern, desc_low):
        for kw, brand in BRAND_KEYWORDS.items():
            if kw in desc_low:
                return "–ù–∞—É—à–Ω–∏–∫–∏", brand
        return "–ù–∞—É—à–Ω–∏–∫–∏", "–û–±—â–µ–µ"


    # --- 2. –ü–ª–∞–Ω—à–µ—Ç—ã (Pad, Tab, Tablet, –∫—Ä–æ–º–µ Notepad) ---
    # –ì–∏–±–∫–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω: tab, tablet, pad, galaxy tab, redmi pad, poco pad, ipad, –∏ —Ç.–¥.
    tablet_pattern = r"(ipad|\btab\b|tablet|pad(?![a-z]))"
    if (re.search(tablet_pattern, desc_low) or re.search(r"pad[\s\d]", desc_low)) and not re.search(r"notepad", desc_low):
        for kw, brand in BRAND_KEYWORDS.items():
            if kw in desc_low:
                return "–ü–ª–∞–Ω—à–µ—Ç—ã", brand
        return "–ü–ª–∞–Ω—à–µ—Ç—ã", "–û–±—â–µ–µ"

    # --- 3. –Ø–≤–Ω—ã–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã (—Ä–∞—Å—à–∏—Ä–µ–Ω–æ) ---
    accessories_kw = [
        "–∞–∫—Å–µ—Å—Å—É–∞—Ä", "—á–µ—Ö–æ–ª", "—Å—Ç–µ–∫–ª–æ", "–∫–∞–±–µ–ª—å", "—à–Ω—É—Ä", "–ø–µ—Ä–µ—Ö–æ–¥–Ω–∏–∫", "adapter", "–∑–∞—Ä—è–¥–∫–∞", "powerbank", "power bank", "magsafe", "pencil", "cover", "case", "screen protector", "–±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω–∞—è –∑–∞—Ä—è–¥–∫–∞", "—Å–µ—Ç–µ–≤–æ–µ –∑–∞—Ä—è–¥–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", "—Å–∑—É", "–±–ª–æ–∫", "–∞–¥–∞–ø—Ç–µ—Ä", "–±–ª–æ–∫ –ø–∏—Ç–∞–Ω–∏—è", "usb", "type-c", "lightning", "micro-usb", "–º–∞–≥–Ω–∏—Ç–Ω—ã–π –∫–∞–±–µ–ª—å", "—Å—Ç–µ–∫–ª–æ –∑–∞—â–∏—Ç–Ω–æ–µ", "–∑–∞—â–∏—Ç–Ω–æ–µ —Å—Ç–µ–∫–ª–æ", "–¥–æ–∫-—Å—Ç–∞–Ω—Ü–∏—è", "–¥–æ–∫ —Å—Ç–∞–Ω—Ü–∏—è", "–¥–æ–∫", "hub", "—Ä–∞–∑–≤–µ—Ç–≤–∏—Ç–µ–ª—å", "splitter", "–¥–µ—Ä–∂–∞—Ç–µ–ª—å", "mount", "–ø–æ–¥—Å—Ç–∞–≤–∫–∞", "—Ä–µ–º–µ—à–æ–∫", "strap", "—Ä–µ–º–µ–Ω—å", "–ø–ª–µ–Ω–∫–∞", "film", "–Ω–∞–∫–ª–µ–π–∫–∞", "–Ω–∞–∫–ª–µ–π–∫–∏", "stylus", "—Å—Ç–∏–ª—É—Å"
    ]
    if any(re.search(rf"(?<![–∞-—èa-z0-9]){re.escape(kw)}(?![–∞-—èa-z0-9])", desc_low) for kw in accessories_kw):
        for kw, brand in BRAND_KEYWORDS.items():
            if kw in desc_low:
                return "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã", brand
        return "–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã", "–û–±—â–µ–µ"

    # --- 3. –ö–æ–ª–æ–Ω–∫–∏ (–∏—Å–∫–ª—é—á–∞—è –Ω–∞—É—à–Ω–∏–∫–∏) ---
    if re.search(r"\b(–∫–æ–ª–æ–Ω–∫–∞|speaker|boombox|partybox|stanmore|woburn)\b", desc_low) and not re.search(r"–Ω–∞—É—à–Ω–∏–∫|–Ω–∞—É—à–Ω–∏–∫–∏|buds|earbuds|–≥–∞—Ä–Ω–∏—Ç—É—Ä–∞", desc_low):
        for kw, brand in BRAND_KEYWORDS.items():
            if kw in desc_low:
                return "–ö–æ–ª–æ–Ω–∫–∏", brand
        return "–ö–æ–ª–æ–Ω–∫–∏", "–û–±—â–µ–µ"

    # --- 4. –ß–∞—Å—ã –∏ –±—Ä–∞—Å–ª–µ—Ç—ã (Garmin, Band, Instinct –∏ –¥—Ä.) ---
    if re.search(r"\b(—á–∞—Å—ã|watch|band|fitbit|amazfit|gtr|gt3|instinct|forerunner|fenix|coros|garmin|band)\b", desc_low):
        for kw, brand in BRAND_KEYWORDS.items():
            if kw in desc_low:
                return "–ß–∞—Å—ã", brand
        return "–ß–∞—Å—ã", "–û–±—â–µ–µ"

    # --- 5. –ü–ª–∞–Ω—à–µ—Ç—ã (Pad, Tab, Tablet, –∫—Ä–æ–º–µ Notepad) ---
    if (re.search(r"\bipad\b|\btab\b|\btablet\b|\bpad\b", desc_low) or re.search(r"pad[\s\d]", desc_low)) and not re.search(r"notepad", desc_low):
        for kw, brand in BRAND_KEYWORDS.items():
            if kw in desc_low:
                return "–ü–ª–∞–Ω—à–µ—Ç—ã", brand
        return "–ü–ª–∞–Ω—à–µ—Ç—ã", "–û–±—â–µ–µ"

    # --- 6. –ù–æ—É—Ç–±—É–∫–∏ (Apple, Matebook, CPU, –¥—é–π–º—ã, –º–æ–¥–µ–ª–∏) ---
    # Apple MacBook: Air/Pro + 13"/14"/15"/16"/M1/M2/M3/M4
    if (re.search(r"macbook|air|pro", desc_low) and (re.search(r"\d{2}\"", desc) or re.search(r"\bm[1-4]\b", desc_low))) or re.search(r"macbook", desc_low):
        return "–ù–æ—É—Ç–±—É–∫–∏", "Apple"
    # Matebook, –Ω–æ—É—Ç–±—É–∫–∏ –¥—Ä—É–≥–∏—Ö –±—Ä–µ–Ω–¥–æ–≤
    if re.search(r"matebook|notebook|ultrabook|chromebook|magicbook|aspire|ideapad|thinkpad|vivobook|zenbook|legion|gigabyte|machenike|lenovo|acer|asus|hp|dell|msi|huawei", desc_low):
        for kw, brand in BRAND_KEYWORDS.items():
            if kw in desc_low:
                return "–ù–æ—É—Ç–±—É–∫–∏", brand
        return "–ù–æ—É—Ç–±—É–∫–∏", "–û–±—â–µ–µ"
    # Intel/AMD CPU + 13"/14"/15"/16"
    if re.search(r"(intel|amd|ryzen|core i[3579]|pentium|celeron)", desc_low) and re.search(r"\d{2}\"", desc):
        return "–ù–æ—É—Ç–±—É–∫–∏", "–û–±—â–µ–µ"

    # --- 7. –¢–µ–ª–µ—Ñ–æ–Ω—ã (Mate X, –±—Ä–µ–Ω–¥—ã, —è–≤–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏) ---
    # Huawei Mate X6 ‚Äî —Ç–µ–ª–µ—Ñ–æ–Ω, Matebook ‚Äî –Ω–æ—É—Ç–±—É–∫
    if re.search(r"matebook", desc_low):
        return "–ù–æ—É—Ç–±—É–∫–∏", "Huawei"
    if re.search(r"mate", desc_low) and not re.search(r"matebook", desc_low):
        return "–¢–µ–ª–µ—Ñ–æ–Ω—ã", "Huawei"
    # –°–º–∞—Ä—Ç—Ñ–æ–Ω—ã –ø–æ –±—Ä–µ–Ω–¥–∞–º –∏ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    phone_kw = ["iphone", "—Å–º–∞—Ä—Ç—Ñ–æ–Ω", "smartphone", "galaxy", "pixel", "zenfone", "oneplus", "realme", "zte", "redmi", "poco", "xiaomi", "samsung", "huawei", "honor"]
    if any(re.search(rf"(?<![–∞-—èa-z0-9]){re.escape(kw)}(?![–∞-—èa-z0-9])", desc_low) for kw in phone_kw):
        for kw, brand in BRAND_KEYWORDS.items():
            if kw in desc_low:
                return "–¢–µ–ª–µ—Ñ–æ–Ω—ã", brand
        return "–¢–µ–ª–µ—Ñ–æ–Ω—ã", "–û–±—â–µ–µ"

    # --- 8. –ö–Ω–æ–ø–æ—á–Ω—ã–µ –∏ –ø—Ä–æ—Ç–∏–≤–æ—É–¥–∞—Ä–Ω—ã–µ —Ç–µ–ª–µ—Ñ–æ–Ω—ã ---
    if re.search(r"button phone|feature phone|–ø—Ä–æ—Ç–∏–≤–æ—É–¥–∞—Ä–Ω—ã–π|rugged|armor|tank|cyber|mega|nokia|f\+|blackview|doogee|oukitel|unihertz", desc_low):
        for kw, brand in BRAND_KEYWORDS.items():
            if kw in desc_low:
                return "–¢–µ–ª–µ—Ñ–æ–Ω—ã –ø—Ä–æ—Ç–∏–≤–æ—É–¥–∞—Ä–Ω—ã–µ", brand
        return "–¢–µ–ª–µ—Ñ–æ–Ω—ã –ø—Ä–æ—Ç–∏–≤–æ—É–¥–∞—Ä–Ω—ã–µ", "–û–±—â–µ–µ"

    # --- 9. –ò–≥—Ä–æ–≤—ã–µ –∫–æ–Ω—Å–æ–ª–∏ –∏ VR ---
    if re.search(r"playstation|ps4|ps5|xbox|switch|steam deck|–¥–∂–æ–π—Å—Ç–∏–∫|–∏–≥—Ä–æ–≤–∞—è –∫–æ–Ω—Å–æ–ª—å|–∏–≥—Ä–æ–≤–∞—è –ø—Ä–∏—Å—Ç–∞–≤–∫–∞|oculus|quest|vr|vr headset|vr —à–ª–µ–º|meta quest", desc_low):
        return "–ò–≥—Ä–æ–≤—ã–µ –∫–æ–Ω—Å–æ–ª–∏", "–û–±—â–µ–µ"

    # --- 10. –≠–∫—à–µ–Ω-–∫–∞–º–µ—Ä—ã ---
    if re.search(r"gopro|osmo action|insta360|insta 360|dji|hero", desc_low):
        for kw, brand in BRAND_KEYWORDS.items():
            if kw in desc_low:
                return "–≠–∫—à–µ–Ω-–∫–∞–º–µ—Ä—ã", brand
        return "–≠–∫—à–µ–Ω-–∫–∞–º–µ—Ä—ã", "–û–±—â–µ–µ"

    # --- 11. –§–µ–Ω-—Å—Ç–∞–π–ª–µ—Ä—ã ---
    if re.search(r"—Ñ–µ–Ω|—Å—Ç–∞–π–ª–µ—Ä|hair dryer|styler|airwrap|supersonic|hd08|hd-08|hd16|hd-16|hs08|hs-08|ht01|ht-01", desc_low):
        return "–§–µ–Ω-—Å—Ç–∞–π–ª–µ—Ä", "–û–±—â–µ–µ"

    # --- 12. –ü—ã–ª–µ—Å–æ—Å—ã ---
    if re.search(r"–ø—ã–ª–µ—Å–æ—Å|vacuum|—Ä–æ–±–æ—Ç-–ø—ã–ª–µ—Å–æ—Å|dyson|dreame|submarine", desc_low):
        for kw, brand in BRAND_KEYWORDS.items():
            if kw in desc_low:
                return "–ü—ã–ª–µ—Å–æ—Å—ã", brand
        return "–ü—ã–ª–µ—Å–æ—Å—ã", "–û–±—â–µ–µ"

    # --- 13. –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º (fallback) ---
    for cat, keywords in CATEGORY_KEYWORDS:
        if any(kw in desc_low for kw in keywords):
            category = cat
            break

    # --- 14. –ë—Ä–µ–Ω–¥ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º (fallback) ---
    first_word = desc.split()[0].strip(',.;:"()').lower() if desc else ""
    if first_word and first_word in BRAND_KEYWORDS:
        subcategory = BRAND_KEYWORDS[first_word]
    else:
        for kw, brand in BRAND_KEYWORDS.items():
            if kw in desc_low:
                subcategory = brand
                break

    # --- 15. –û—Å–æ–±–æ–µ –ø—Ä–∞–≤–∏–ª–æ: –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ Go Pro –≤—Å–µ–≥–¥–∞ –±—Ä–µ–Ω–¥ GoPro ---
    if category == "Go Pro":
        subcategory = "GoPro"

    return category, subcategory


async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ .xlsx, —Å–∫–∞—á–∏–≤–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º."""
    user_id = update.effective_user.id if update.effective_user else None
    awaiting_file = context.user_data.get("awaiting_file")

    # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /add
    if user_id not in ADMIN_USER_IDS or not awaiting_file:
        await update.message.reply_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å –±–æ—Ç –Ω–µ –æ–∂–∏–¥–∞–µ—Ç —Ñ–∞–π–ª –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∑–∞–≥—Ä—É–∑–∫–∏."
        )
        return

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    context.user_data["awaiting_file"] = False

    document = update.message.document
    if not document:
        return

    if not document.file_name.lower().endswith(".xlsx"):
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlsx. –î—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è."
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    tmp_dir = Path(tempfile.mkdtemp())
    src_path = tmp_dir / document.file_name
    file_obj = await document.get_file()
    await file_obj.download_to_drive(str(src_path))

    try:
        # –ß–∏—Ç–∞–µ–º Excel
        df = pd.read_excel(src_path)
    except Exception as exc:
        await update.message.reply_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –∫–∞–∫ Excel: " f"{exc}"
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–ø–∏—é —Ñ–∞–π–ª–∞, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥–ª–∏ —Å–∫–∞—á–∏–≤–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é
    try:
        shutil.copy(src_path, LATEST_EXCEL_FILE)
    except Exception:
        pass

    # –°—Ç—Ä–æ–∏–º –∫–∞—Ç–∞–ª–æ–≥ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
    catalog: dict[str, dict[str, list[dict[str, str]]]] = {}
    for _, row in df.iterrows():
        desc = str(row.get("description") or row.get("desription") or "")
        price = row.get("price") or row.get("–¶–µ–Ω–∞") or row.get("Price") or ""
        cat, sub = extract_category(desc)
        catalog.setdefault(cat, {}).setdefault(sub, []).append({"desc": desc, "price": price})

    if not catalog:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–∞–ª–æ–≥ –≤ bot_data (–æ–±—â–∏–π –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    context.application.bot_data["catalog"] = catalog
    # –ê —Ç–∞–∫–∂–µ –Ω–∞ –¥–∏—Å–∫, —á—Ç–æ–±—ã –∫–∞—Ç–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω—è–ª—Å—è –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏ –±–æ—Ç–∞
    _save_catalog_to_disk(catalog)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–≤–∞—Ä–æ–≤
    buttons = []
    for cat in _sort_categories(list(catalog.keys())):
        subdict = catalog[cat]
        count = sum(len(items) for items in subdict.values())
        buttons.append([InlineKeyboardButton(text=f"{cat} ({count})", callback_data=f"cat|{cat}")])
    markup = InlineKeyboardMarkup(buttons)
    await update.message.reply_text("–ö–∞—Ç–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∂–µ–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    try:
        os.remove(src_path)
        os.rmdir(tmp_dir)
    except OSError:
        pass


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é."""

    chat_id = update.effective_chat.id
    text = update.message.text
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –¥–µ–π—Å—Ç–≤–∏–µ–º
    await delete_all_user_messages(context, chat_id)
    # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞)
    if update.message and not update.message.text.startswith("/"):
        try:
            await context.bot.delete_message(chat_id=chat_id, message_id=update.message.message_id)
        except Exception:
            pass

    # --- 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∂–∏–º–∞ –ø–æ–∏—Å–∫–∞ ---
    if context.user_data.get("awaiting_search"):
        context.user_data["awaiting_search"] = False
        query = (text or "").strip()
        if not query:
            m = await context.bot.send_message(chat_id=chat_id, text="–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=MAIN_MENU_MARKUP)
            context.user_data["all_msg_ids"] = [m.message_id]
            return
        catalog: dict | None = context.application.bot_data.get("catalog")
        if not catalog:
            m = await context.bot.send_message(chat_id=chat_id, text="–ö–∞—Ç–∞–ª–æ–≥ –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=MAIN_MENU_MARKUP)
            context.user_data["all_msg_ids"] = [m.message_id]
            return
        query_low = query.lower()
        results: list[tuple[str, str, dict]] = []
        for cat, subdict in catalog.items():
            for sub, items in subdict.items():
                for item in items:
                    if query_low in str(item["desc"]).lower():
                        results.append((cat, sub, item))
        if not results:
            m = await context.bot.send_message(chat_id=chat_id, text="–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.", reply_markup=MAIN_MENU_MARKUP)
            context.user_data["all_msg_ids"] = [m.message_id]
            return
        lines: list[str] = []
        for cat, sub, item in results:
            desc = html.escape(str(item["desc"]))
            price = str(item["price"]).strip()
            line = f"<b>{desc}</b>"
            if price:
                line += f" ‚Äî <i>{html.escape(price)} ‚ÇΩ</i>"
            line += f"\n<i>{cat} / {sub}</i>"
            lines.append(line)
        MAX_LENGTH = 4000
        chunks: list[str] = []
        current: list[str] = []
        cur_len = 0
        for line in lines:
            ln = len(line) + 1
            if cur_len + ln > MAX_LENGTH and current:
                chunks.append("\n\n".join(current))
                current = [line]
                cur_len = ln
            else:
                current.append(line)
                cur_len += ln
        if current:
            chunks.append("\n\n".join(current))
        msg_ids = []
        m = await context.bot.send_message(chat_id=chat_id, text=f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π: {len(results)}", reply_markup=MAIN_MENU_MARKUP)
        msg_ids.append(m.message_id)
        back_markup = InlineKeyboardMarkup([[InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="back|root")]])
        for idx, chunk in enumerate(chunks):
            if idx == len(chunks) - 1:
                msg = await context.bot.send_message(chat_id=chat_id, text=chunk, parse_mode="HTML" if chunk else None, reply_markup=back_markup)
            else:
                msg = await context.bot.send_message(chat_id=chat_id, text=chunk, parse_mode="HTML" if chunk else None)
            msg_ids.append(msg.message_id)
        context.user_data["all_msg_ids"] = msg_ids
        return

    # --- 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ ---
    if text == BTN_SEARCH_CATALOG:
        context.user_data["awaiting_search"] = True
        m = await context.bot.send_message(chat_id=chat_id, text="–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É:", reply_markup=MAIN_MENU_MARKUP)
        context.user_data["all_msg_ids"] = [m.message_id]
        return
    if text == BTN_CHOOSE_CATEGORY:
        catalog: dict | None = context.application.bot_data.get("catalog")
        if catalog:
            buttons = []
            for cat_name in _sort_categories(list(catalog.keys())):
                subdict = catalog[cat_name]
                count = sum(len(items) for items in subdict.values())
                buttons.append([InlineKeyboardButton(text=f"{cat_name} ({count})", callback_data=f"cat|{cat_name}")])
            markup = InlineKeyboardMarkup(buttons)
            m = await context.bot.send_message(chat_id=chat_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)
            context.user_data["all_msg_ids"] = [m.message_id]
        else:
            m = await context.bot.send_message(chat_id=chat_id, text="–ö–∞—Ç–∞–ª–æ–≥ –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=MAIN_MENU_MARKUP)
            context.user_data["all_msg_ids"] = [m.message_id]
    elif text == BTN_CONTACT_MANAGER:
        link_btn_tg = InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É –≤ –¢–µ–ª–µ–≥—Ä–∞–º", url=MANAGER_TELEGRAM_LINK)
        link_btn_wa = InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É –≤ WhatsApp", url=MANAGER_WHATSAPP_LINK)
        m = await context.bot.send_message(
            chat_id=chat_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏ —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º:",
            reply_markup=MAIN_MENU_MARKUP
        )
        # –û—Ç–ø—Ä–∞–≤–∏–º —Ç–∞–∫–∂–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, —á—Ç–æ–±—ã –Ω–µ —Ç–µ—Ä—è—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
        m2 = await context.bot.send_message(
            chat_id=chat_id,
            text="–ë—ã—Å—Ç—Ä—ã–µ —Å—Å—ã–ª–∫–∏:",
            reply_markup=InlineKeyboardMarkup([[link_btn_tg], [link_btn_wa]])
        )
        context.user_data["all_msg_ids"] = [m.message_id, m2.message_id]
    elif text == BTN_GET_EXCEL:
        if os.path.exists(LATEST_EXCEL_FILE):
            try:
                m = await context.bot.send_document(chat_id=chat_id, document=open(LATEST_EXCEL_FILE, "rb"), filename="catalog.xlsx", reply_markup=MAIN_MENU_MARKUP)
                context.user_data["all_msg_ids"] = [m.message_id]
            except Exception as exc:
                m = await context.bot.send_message(chat_id=chat_id, text=f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª: {exc}", reply_markup=MAIN_MENU_MARKUP)
                context.user_data["all_msg_ids"] = [m.message_id]
        else:
            m = await context.bot.send_message(chat_id=chat_id, text="–§–∞–π–ª –∫–∞—Ç–∞–ª–æ–≥–∞ –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.", reply_markup=MAIN_MENU_MARKUP)
            context.user_data["all_msg_ids"] = [m.message_id]

    elif text == BTN_SUBSCRIBE:
        subs: set[int] = context.application.bot_data.setdefault("subscribers", set())
        user_id = update.effective_user.id if update.effective_user else None
        if user_id:
            subs.add(user_id)
            m = await context.bot.send_message(chat_id=chat_id, text="–°–ø–∞—Å–∏–±–æ! –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.", reply_markup=MAIN_MENU_MARKUP)
            context.user_data["all_msg_ids"] = [m.message_id]
        else:
            m = await context.bot.send_message(chat_id=chat_id, text="–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.", reply_markup=MAIN_MENU_MARKUP)
            context.user_data["all_msg_ids"] = [m.message_id]

    # --- 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
    else:
        m = await context.bot.send_message(chat_id=chat_id, text="–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ.", reply_markup=MAIN_MENU_MARKUP)
        context.user_data["all_msg_ids"] = [m.message_id]


async def callback_query_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –¥–µ–π—Å—Ç–≤–∏–µ–º
    await delete_all_user_messages(context, chat_id)
    query = update.callback_query
    await query.answer()
    data = query.data or ""
    parts = data.split("|")
    if not parts:
        return

    catalog = context.application.bot_data.get("catalog")
    if not catalog:
        await query.edit_message_text("–ö–∞—Ç–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∫–æ–º–∞–Ω–¥–æ–π /add.")
        return

    if parts[0] == "cat":  # –í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        cat = parts[1]
        subcats = catalog.get(cat, {})
        buttons = []
        for sub_name, items in subcats.items():
            buttons.append([InlineKeyboardButton(text=f"{sub_name} ({len(items)})", callback_data=f"sub|{cat}|{sub_name}")])
        buttons.append([InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data="back|root")])
        markup = InlineKeyboardMarkup(buttons)
        m = await context.bot.send_message(chat_id=chat_id, text=f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {cat}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=markup)
        context.user_data["all_msg_ids"] = [m.message_id]

    elif parts[0] == "sub":  # –í—ã–±—Ä–∞–Ω–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è
        cat, sub = parts[1], parts[2]
        items = catalog.get(cat, {}).get(sub, [])
        text_lines: list[str] = []
        for item in items:
            desc = html.escape(str(item['desc']))
            price = str(item['price']).strip()
            line = f"<b>{desc}</b>"
            if price:
                line += f" ‚Äî <i>{html.escape(price)} ‚ÇΩ</i>"
            text_lines.append(line)

        MAX_LENGTH = 4000
        chunks: list[str] = []
        current_lines: list[str] = []
        current_len = 0
        for line in text_lines:
            line_len = len(line) + 1
            if current_len + line_len > MAX_LENGTH and current_lines:
                chunks.append("\n".join(current_lines))
                current_lines = [line]
                current_len = line_len
            else:
                current_lines.append(line)
                current_len += line_len
        if current_lines:
            chunks.append("\n".join(current_lines))

        if not chunks:
            chunks = ["–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤."]

        buttons = [[InlineKeyboardButton(text="‚Üê –ù–∞–∑–∞–¥", callback_data=f"cat|{cat}")]]
        markup = InlineKeyboardMarkup(buttons)

        msg_ids = []
        if len(chunks) == 1:
            text_to_send = f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {cat} / {sub}\n\n{chunks[0]}"
            m = await context.bot.send_message(chat_id=chat_id, text=text_to_send, reply_markup=markup, parse_mode="HTML")
            msg_ids.append(m.message_id)
        else:
            first_text = f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {cat} / {sub}\n\n{chunks[0]}"
            m = await context.bot.send_message(chat_id=chat_id, text=first_text, reply_markup=None, parse_mode="HTML")
            msg_ids.append(m.message_id)
            for chunk in chunks[1:-1]:
                mm = await context.bot.send_message(chat_id=chat_id, text=chunk, parse_mode="HTML")
                msg_ids.append(mm.message_id)
            mm = await context.bot.send_message(chat_id=chat_id, text=chunks[-1], reply_markup=markup, parse_mode="HTML")
            msg_ids.append(mm.message_id)
        context.user_data["all_msg_ids"] = msg_ids
        return

    elif parts[0] == "back":
        # –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–≤—Å–µ —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É–∂–µ —É–¥–∞–ª–µ–Ω—ã)
        m = await context.bot.send_message(chat_id=chat_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=MAIN_MENU_MARKUP)
        context.user_data["all_msg_ids"] = [m.message_id]
        return


def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    if TOKEN == "YOUR_BOT_TOKEN_HERE":
        raise RuntimeError(
            "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–¥–∞—Ç—å —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞. "
            "–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TOKEN –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ TG_BOT_TOKEN."
        )

    app = ApplicationBuilder().token(TOKEN).build()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ —Å –¥–∏—Å–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ bot_data
    initial_catalog = _load_catalog_from_disk()
    if initial_catalog:
        app.bot_data["catalog"] = initial_catalog

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("add", add_command))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND) & (~filters.Document.ALL), handle_text))
    app.add_handler(CallbackQueryHandler(callback_query_handler))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –ø–æ–ª–ª–∏–Ω–≥
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl-C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    app.run_polling()


if __name__ == "__main__":
    main() 